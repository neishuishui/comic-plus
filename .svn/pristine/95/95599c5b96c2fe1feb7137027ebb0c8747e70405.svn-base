import { computed, defineComponent, h, Fragment } from 'vue';
import '../style/space.css';
import { isNumber } from '../../../utils';
import { spaceProps } from './main.props';

export default defineComponent({
  name: 'CuSpace',
  props: spaceProps,
  setup(props, { slots }) {
    const sizeStringEnum = {
      small: '8px',
      default: '12px',
      large: '16px'
    };

    const filterEmpty = (children: any[]) => {
      const res = [];
      children.forEach((child) => {
        if (Array.isArray(child)) {
          res.push(...child);
        } else if (child.type === Fragment) {
          res.push(...child.children);
        } else {
          res.push(child);
        }
      });
      return res.filter((c) => !isEmptyElement(c));
    };

    const isEmptyElement = (c: any): boolean => {
      return (
        c &&
        (c.type === Comment ||
          (c.type === Fragment && c.children.length === 0) ||
          (c.type === Text && c.children.trim() === ''))
      );
    };

    const spaceStyle = computed(() => {
      return {
        'align-items': props.align,
        'flex-wrap': props.wrap ? 'wrap' : 'nowrap',
        gap: isNumber(props.size) ? props.size + 'px' : sizeStringEnum[props.size],
        width: props.fill ? '100%' : undefined
      };
    });
    const itemStyle = computed(() => {
      if (!props.fill) return undefined;
      return {
        'flex-grow': 1,
        'min-width': props.fillRatio + '%'
      };
    });

    return () => {
      const items = filterEmpty(slots.default?.() ?? []);
      const len = items.length;
      if (len === 0) return null;

      return h(
        'div',
        { class: ['cu-space', 'cu-space--' + props.direction], style: spaceStyle.value },
        items.map((child, index) => {
          const item = h('div', { class: 'cu-space-item', style: itemStyle.value }, [child]);
          if (props.split && index + 1 < len) {
            return [item, h('div', { class: 'cu-space-split' }, [props.split])];
          }
          return item;
        })
      );
    };
  }
});
