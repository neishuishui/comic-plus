<template>
  <form class="cu-form" onsubmit="return false">
    <slot></slot>
  </form>
</template>

<script setup lang="ts">
import { provide, ref, onMounted } from 'vue';
import '../style/css';
defineOptions({
  name: 'CuForm'
});

const props = defineProps({
  model: Object,
  labelWidth: {
    type: String,
    default: '120px'
  },
  rules: Object,
  size: String
});

const itemInfoList = ref([]);
const originData = ref({});

interface itemInfoProp {
  prop: string;
  validate: Function;
  clearValidate: Function;
}
function validate(callback: Function) {
  const promises = itemInfoList.value.map((item: itemInfoProp) => item.validate());
  Promise.all(promises)
    .then(() => {
      callback(true);
    })
    .catch(() => {
      callback(false);
    });
}

function validateFields(names: string[], callback: Function) {
  if (!props.rules) return;
  const promises = itemInfoList.value
    .filter((item: itemInfoProp) => names.includes(item.prop))
    .map((item: itemInfoProp) => item.validate());
  Promise.all(promises)
    .then(() => {
      callback(true);
    })
    .catch(() => {
      callback(false);
    });
}

function clearValidates(names: string[] | undefined) {
  const promises = itemInfoList.value.filter(names ? (item: itemInfoProp) => names.includes(item.prop) : Boolean);
  promises.forEach((field: itemInfoProp) => {
    field.clearValidate();
  });
}

function resetFields(names: string[] | undefined) {
  const promises = itemInfoList.value.filter(names ? (item: itemInfoProp) => names.includes(item.prop) : Boolean);
  promises.forEach((field: itemInfoProp) => {
    field.clearValidate();
  });
  Object.assign(props.model, originData.value);
}

function itemValidatePush(item: itemInfoProp) {
  let index = itemInfoList.value.findIndex((v: itemInfoProp) => v.prop === item.prop);
  if (index >= 0) {
    itemInfoList.value.splice(index, 1);
  }
  itemInfoList.value.push(item);
}

provide('form:labelWidth', props.labelWidth);
provide('form:rules', props.rules);
provide('form:validatepush', itemValidatePush);
provide('form:model', props.model);
provide('form:size', props.size);

defineExpose({ validate, validateFields, clearValidates, resetFields });

onMounted(() => {
  originData.value = JSON.parse(JSON.stringify(props.model));
});
</script>
