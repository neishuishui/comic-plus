import { UploadFile } from './type';

declare function submit(): Promise<void>;
declare const _default: __VLS_WithTemplateSlots<import('vue').DefineComponent<{
    readonly fileList: import("vue").PropType<UploadFile[]>;
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "list";
        readonly validator: (value: string) => boolean;
    };
    readonly http: {
        readonly type: import("vue").PropType<string | Function>;
        readonly required: true;
    };
    readonly headers: ObjectConstructor;
    readonly data: ObjectConstructor;
    readonly autoUpload: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly multiple: BooleanConstructor;
    readonly limit: NumberConstructor;
    readonly disabled: BooleanConstructor;
    readonly maxFileSize: StringConstructor;
    readonly withCredentials: BooleanConstructor;
    readonly accept: StringConstructor;
    readonly onExceed: FunctionConstructor;
    readonly onLarge: FunctionConstructor;
    readonly onSuccess: FunctionConstructor;
    readonly onError: FunctionConstructor;
    readonly onChange: FunctionConstructor;
    readonly beforeUpload: FunctionConstructor;
}, {
    submit: typeof submit;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:fileList": (files: UploadFile[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    readonly fileList: import("vue").PropType<UploadFile[]>;
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "list";
        readonly validator: (value: string) => boolean;
    };
    readonly http: {
        readonly type: import("vue").PropType<string | Function>;
        readonly required: true;
    };
    readonly headers: ObjectConstructor;
    readonly data: ObjectConstructor;
    readonly autoUpload: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly multiple: BooleanConstructor;
    readonly limit: NumberConstructor;
    readonly disabled: BooleanConstructor;
    readonly maxFileSize: StringConstructor;
    readonly withCredentials: BooleanConstructor;
    readonly accept: StringConstructor;
    readonly onExceed: FunctionConstructor;
    readonly onLarge: FunctionConstructor;
    readonly onSuccess: FunctionConstructor;
    readonly onError: FunctionConstructor;
    readonly onChange: FunctionConstructor;
    readonly beforeUpload: FunctionConstructor;
}>> & {
    "onUpdate:fileList"?: (files: UploadFile[]) => any;
}, {
    readonly type: string;
    readonly withCredentials: boolean;
    readonly disabled: boolean;
    readonly multiple: boolean;
    readonly autoUpload: boolean;
}, {}>, {
    default?(_: {}): any;
    trigger?(_: {}): any;
    tip?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
