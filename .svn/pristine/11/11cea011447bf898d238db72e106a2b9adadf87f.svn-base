<template>
  <div
    class="cu-table"
    v-resize="onResize"
    :style="{ 'max-height': height }"
    :class="[
      { border: options.border },
      { 'show-left-shadow': tableResize.leftShadow },
      { 'show-right-shadow': tableResize.rightShadow }
    ]"
  >
    <scroll-bar
      ref="scrollBarRef"
      @scroll="scroll"
      :style="{ maxHeight: `calc(${height} - ${options.border ? 2 : 0}px)` }"
    >
      <div v-resize="getResize" style="width: fit-content; height: fit-content; min-width: 100%; min-height: 100%">
        <div class="cu-table__head">
          <table :style="{ width: tableResize.width + 'px' }">
            <colgroup>
              <col v-if="options.selection" style="width: 40px; min-width: 40px" />
              <col
                v-for="th in columns"
                :style="{
                  width: (th.width || tableResize.flexWidth) + 'px',
                  minWidth: (th.width || tableResize.flexWidth) + 'px'
                }"
              />
            </colgroup>
            <thead>
              <tr class="cu-table__row" :style="options.headStyle">
                <th
                  class="cu-table__th checkbox fixed-left"
                  :class="{ 'fixed-shadow-left': getStickyIndex.left == -1 }"
                  width="40"
                  v-if="options.selection"
                >
                  <checkbox :modelValue="isCheckAll" @change="_changeCheckAll" :ispart="ispart"></checkbox>
                </th>
                <th
                  class="cu-table__th"
                  v-for="(th, index) in columns"
                  :class="[
                    th.fixed ? 'fixed-' + th.fixed : undefined,
                    { 'fixed-shadow-left': getStickyIndex.left == index },
                    { 'fixed-shadow-right': getStickyIndex.right == index }
                  ]"
                  :style="styles(th, index)"
                >
                  <span>
                    <slot :name="'th-' + th.prop">{{ th.label }}</slot>
                  </span>
                </th>
              </tr>
            </thead>
          </table>
        </div>
        <div class="cu-table__body">
          <table :style="{ width: tableResize.width + 'px' }">
            <colgroup>
              <col v-if="options.selection" style="width: 40px; min-width: 40px" />
              <col
                v-for="td in columns"
                :style="{
                  width: (td.width || tableResize.flexWidth) + 'px',
                  minWidth: (td.width || tableResize.flexWidth) + 'px'
                }"
              />
            </colgroup>
            <tbody>
              <div class="cu-table__empty" v-if="data.length === 0">暂无数据</div>
              <tr
                v-for="(item, i) in data"
                class="cu-table__row"
                :style="
                  stripeStyle
                    ? {
                        backgroundColor: stripeStyle[i % 2 == 0 ? 0 : 1]
                      }
                    : options.bodyStyle
                "
              >
                <td
                  class="cu-table__td checkbox fixed-left"
                  :class="{ 'fixed-shadow-left': getStickyIndex.left == -1 }"
                  width="40"
                  v-if="options.selection"
                >
                  <checkbox
                    :modelValue="checkList.findIndex((v) => v === item) >= 0"
                    @change="_changeSelection($event, item)"
                  ></checkbox>
                </td>
                <td
                  colspan="1"
                  rowspan="1"
                  class="cu-table__td"
                  :class="[
                    td.fixed ? 'fixed-' + td.fixed : undefined,
                    { 'fixed-shadow-left': getStickyIndex.left == index },
                    { 'fixed-shadow-right': getStickyIndex.right == index }
                  ]"
                  v-for="(td, index) in columns"
                  :style="styles(td, index)"
                >
                  <span>
                    <slot :name="td.prop ? td.prop : 'default'" :row="item">{{ item[td.prop] ?? options.empty }}</slot>
                  </span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </scroll-bar>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, computed, watch } from 'vue';
import '../style/css';
import scrollBar from '../../scroll-bar';
import { useResize } from '../../utils/directive';
import { debounce } from '../../utils/tools';
import checkbox from '../../checkbox/src/main.vue';
import { tableProps, tableEmits } from './main.props';
defineOptions({
  name: 'CuTable'
});

interface Tableresize {
  width: number;
  height: number;
  flexWidth: number;
  leftShadow: boolean;
  rightShadow: boolean;
}

const vResize = useResize();

const props = defineProps(tableProps);
const emit = defineEmits(tableEmits);
const MIN_SIZE = 120;

const onResize = debounce(getResize);

const scrollBarRef = ref();
const tableResize = reactive({
  width: 0,
  height: 0,
  flexWidth: 0,
  leftShadow: false,
  rightShadow: false
}) as Tableresize;
const checkList = ref<any[]>([]);

watch(props.data, () => {
  checkList.value.splice(0);
});
watch(checkList.value, (val) => {
  emit('select-change', val);
});

const stripeStyle = computed(() => {
  if (!props.options.stripe) return false;
  let s: any = props.options.bodyStyle || null;
  if (props.options.stripeColors) {
    return [props.options.stripeColors[0] ?? '#fff', props.options.stripeColors[1] ?? '#fafafa'];
  } else {
    return ['#fff', s?.backgroundColor ?? '#fafafa'];
  }
});
const columns = computed(() => {
  let column = props.options.column ?? [];
  column = column.sort((a, b) => {
    if (a.fixed === 'left' && (!b.fixed || b.fixed !== 'left')) {
      return -1;
    } else if (b.fixed === 'left' && (!a.fixed || a.fixed !== 'left')) {
      return 1;
    } else if (a.fixed === 'right' && b.fixed !== 'right') {
      return 1;
    } else if (b.fixed === 'right' && a.fixed !== 'right') {
      return -1;
    } else {
      return 0;
    }
  });
  return column;
});

const ispart = computed(() => {
  if (!props.options.selection) return false;
  return checkList.value.length > 0 && checkList.value.length < props.data.length;
});

const isCheckAll = computed(() => {
  if (!props.options.selection) return false;
  return checkList.value.length === props.data.length;
});

const getStickyIndex = computed(() => {
  return {
    left: findLastObjectWithProperty(),
    right: columns.value?.findIndex((v) => v.fixed === 'right')
  };
});

// 查找具有指定属性的最后一个对象
function findLastObjectWithProperty() {
  for (let i = columns.value?.length! - 1; i >= 0; i--) {
    let item = columns.value?.[i];
    if (item?.fixed === 'left') {
      return i;
    }
  }
  return -1;
}

function styles(css: any, index: number) {
  let obj: any = {};
  obj.textAlign = css.align;
  if (css.fixed === 'left') {
    obj.left = getStickyLeft(index) + 'px';
  } else if (css.fixed === 'right') {
    obj.right = getStickyRight(index) + 'px';
  }
  return obj;
}

function getStickyLeft(index: number) {
  let left: number = 0;
  if (index > 0) {
    for (let i = 0; i < index; i++) {
      let item = columns.value?.[i];
      left += item?.fixed === 'left' ? item?.width || MIN_SIZE : 0;
    }
  }
  left += props.options.selection ? 40 : 0;
  return left;
}
function getStickyRight(index: number) {
  let right: number = 0;
  if (index < columns.value?.length! - 1) {
    for (let i = columns.value?.length! - 1; i > index; i--) {
      let item = columns.value?.[i];
      right += item?.fixed === 'right' ? item?.width || MIN_SIZE : 0;
    }
  }
  return right;
}

function scroll(e) {
  tableResize.leftShadow = e.target.scrollLeft > 0;
  tableResize.rightShadow = e.target.scrollWidth - e.target.scrollLeft - e.target.offsetWidth != 0;
}

function getResize(rect) {
  const { width, height } = rect;
  tableResize.width = width;
  tableResize.height = height;
  let length = columns.value?.filter((v) => !v.width).length ?? 0;
  let allWidth = columns.value?.reduce((v, o) => (v += Number(o.width) || 0), 0) ?? 0;
  allWidth += props.options.selection ? 40 : 0;
  let w = (tableResize.width - allWidth) / length;
  tableResize.flexWidth = w <= MIN_SIZE ? MIN_SIZE : w;
  let e = scrollBarRef.value?.getScrollEvent();
  tableResize.leftShadow = e.scrollLeft > 0;
  tableResize.rightShadow = e.scrollWidth - e.scrollLeft - e.offsetWidth != 0;
}

function _changeSelection(e: boolean, item: any) {
  if (e) {
    selectRow(item);
  } else {
    checkList.value.splice(
      checkList.value.findIndex((v) => v === item),
      1
    );
  }
}
function _changeCheckAll(e: boolean) {
  clearSelection();
  if (e) {
    checkList.value.push(...props.data);
  }
}

function selectRow(row: any | any[]) {
  if (checkList.value.find((v) => v === row)) return;
  row = [].concat(row);
  checkList.value.push(...row);
}
function clearSelection() {
  checkList.value.splice(0);
}

defineExpose({ selectRow, clearSelection });
</script>
