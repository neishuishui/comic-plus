<template>
  <span class="cu-input" :class="[size ?? formSize ?? SIZE, { 'is-disabled': disabled }]" :style="{ width }">
    <span class="prefix-slot" v-if="$slots.prefix">
      <slot name="prefix"></slot>
    </span>
    <span
      class="cu-input__content"
      :style="{
        paddingLeft: prefixIcon || $slots['prefix-icon'] ? '20px' : false,
        paddingRight: suffixIcon || $slots['suffix-icon'] ? '20px' : false
      }"
    >
      <span class="prefix-icon" v-if="prefixIcon || $slots['prefix-icon']">
        <slot name="prefix-icon">
          <i v-if="prefixIcon" :class="prefixIcon"></i>
        </slot>
      </span>
      <input
        class="cu-input__inner"
        :style="{ paddingRight: clearable ? '18px' : false }"
        :value="modelValue"
        @input="input"
        @focus="emit('focus', $event)"
        @blur="blur"
        @change="change($event.target?.value)"
        :placeholder="placeholder"
        :type="type"
        :disabled="disabled"
      />
      <span class="suffix-icon" v-if="suffixIcon || $slots['suffix-icon'] || clearable">
        <i class="cu-icon-close-c clearable" v-if="clearable" v-show="modelValue" @click="clear"></i>

        <slot name="suffix-icon">
          <i v-if="suffixIcon" :class="suffixIcon"></i>
        </slot>
      </span>
    </span>
    <span class="suffix-slot" v-if="$slots.suffix">
      <slot name="suffix"></slot>
    </span>
  </span>
</template>

<script setup lang="ts">
import { inject } from 'vue';
import '../style/css';
import useItemValidate from '../../utils/mixin/validate.js';
import { useConfig } from '../../utils/config.js';

defineOptions({
  name: 'CuInput'
});
const props = defineProps({
  modelValue: {
    type: [String, Number],
    required: true
  },
  size: String,
  prefixIcon: String,
  suffixIcon: String,
  clearable: Boolean,
  placeholder: String,
  type: String,
  width: String,
  disabled: Boolean
});

const emit = defineEmits(['update:modelValue', 'clear', 'focus', 'blur', 'change', 'input']);

const { itemValidate } = useItemValidate();
const { SIZE } = useConfig();
const formSize = inject<string | null>('form:size', null);

function input(e: Event) {
  let val = e.target?.value;
  if (props.type === 'number') {
    val = Number(val);
  }
  emit('update:modelValue', val);
  change(val);
  emit('input', val);
}
function clear() {
  emit('update:modelValue', '');
  change('');
  emit('clear');
}

function blur(e: Event) {
  emit('blur', e);
  itemValidate('blur');
}
function change(val: string | number) {
  emit('change', val);
  itemValidate('change');
}
</script>
