<template>
  <label
    class="cu-checkbox"
    :style="activeColor ? '--active-color:' + activeColor : undefined"
    :class="{ 'is-disabled': disabled }"
  >
    <input type="checkbox" :checked="isCheck" :disabled="disabled" @change="changeValue" v-show="false" />
    <span class="cu-checkbox__inner" :class="{ ispart }">
      <i v-if="part" :class="modelValue ? 'cu-icon-success ' : ispart ? 'cu-icon-minus' : ''"></i>
      <i v-else class="cu-icon-success" v-show="isCheck"></i>
    </span>
    <span class="cu-checkbox__label">
      <slot>{{ label }}</slot>
    </span>
  </label>
</template>

<script setup lang="ts">
import { computed, inject } from 'vue';
import '../style/css';
import useItemValidate from '../../utils/mixin/validate.js';
defineOptions({
  name: 'CuCheckbox'
});
const emit = defineEmits(['update:modelValue', 'change']);
const props = defineProps({
  modelValue: Boolean,
  label: {
    type: [String, Number]
  },
  ispart: {
    type: Boolean,
    default: () => {
      return null;
    }
  },
  disabled: Boolean,
  activeColor: String
});

const part = computed(() => {
  return typeof props.ispart === 'boolean';
});

const isGroup = inject<boolean>('group:isGroup', false);
const activeValue = inject<any[]>('group:activeValue', []);
const changeItemCheck = inject<Function | null>('group:changeItemCheck', null);

const { itemValidate } = useItemValidate();

const isCheck = computed(() => {
  return isGroup ? activeValue?.value.includes(props.label) : props.modelValue;
});

function changeValue(e: Event) {
  if (isGroup) {
    changeItemCheck && changeItemCheck(e.target?.checked, props.label);
    return;
  }
  if (typeof props.modelValue === 'boolean') {
    emit('update:modelValue', e.target?.checked);
    emit('change', e.target?.checked);
    itemValidate('change');
  }
}
</script>
