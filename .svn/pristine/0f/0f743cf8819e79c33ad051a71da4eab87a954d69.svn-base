


/**
 * @description: vClickOutside指令
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const useClickOutside: Function = function (): object {
  return {
    mounted(el: HTMLElement, binding: any) {
      function eventHandler(e: Event) {
        if (el.contains((<HTMLElement>e.target)) || hasParent(e.target, binding.arg)) {
          return false;
        }
        if (binding.value && typeof binding.value === 'function') {
          binding.value(e);
        }
      }
      el.__click_outside__ = eventHandler;
      document.addEventListener('click', eventHandler);
    },
    beforeUnmount(el: HTMLElement) {
      document.removeEventListener('click', el.__click_outside__);
      delete el.__click_outside__;
    }
  }
};
/**
 * @description: 是否存在指定父元素
 * @param {HTMLElement} ele
 * @param {string} attr
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const hasParent: Function = function (ele: HTMLElement, attr: string): boolean {
  if (!attr) return false
  let parent: HTMLElement | null = ele
  let flag = false
  while (parent && !flag) {
    let attrs = parent.getAttribute('outside')
    parent = parent.parentElement || null
    if (attrs && attrs === attr) {
      flag = true
    }
  }
  return flag
}

/**
 * @description: vResize指令
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const useResize: Function = function (): object {
  return {
    mounted(el: HTMLElement, binding: any) {
      const handleResize = (entries) => {
        const { width, height } = entries[0].contentRect;
        binding.value({ width, height });
      };
      const resizeObserver = new ResizeObserver(handleResize);
      resizeObserver.observe(el);
      el.__resizeObserver__ = resizeObserver;
    },
    beforeUnmount(el) {
      if (el.__resizeObserver__) {
        el.__resizeObserver__.disconnect();
        delete el.__resizeObserver__;
      }
    }
  }
};

interface titleObj {
  content: string,
  customStyle?: object
}

/**
 * @description: 创建title元素
 * @param {HTMLElement} el
 * @param {object} value
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const creatTitle = function (el: HTMLElement, value: titleObj): void {
  value = typeof value === 'object' ? value : { content: value };
  var s: HTMLElement;
  el.onmouseenter = function (e: MouseEvent) {
    let show = el.getAttribute('show-title')
    if (show === 'false') return
    s = document.createElement('span');
    s.className = 'cu-title';
    document.body.appendChild(s);
    if (value.customStyle) {
      for (const key in value.customStyle) {
        s.style.setProperty(key, value.customStyle[key])
      }
    }
    s.innerText = value.content ? value.content : el.innerText;
    var x = e.clientX;
    var y = e.clientY;
    s.style.transform = `translate(${x + 20}px,${y + 60}px)`;
    let t: any = setTimeout(() => {
      s.style.transition = 'all 100ms';
      clearTimeout(t);
      t = undefined;
    }, 200);
    move();
    out();
  };

  function move() {
    el.onmousemove = function (e) {
      var x = e.clientX;
      var y = e.clientY;
      if (x >= window.innerWidth - s.offsetWidth) {
        x = x - s.offsetWidth - 10;
      } else {
        x += 10;
      }
      if (y >= window.innerHeight / 2) {
        y = y - s.offsetHeight - 20;
      } else {
        y += 20;
      }
      s.style.transform = `translate(${x}px,${y}px)`;
    };
  }
  function out() {
    el.onmouseleave = function () {
      el.onmousemove = null;
      el.onmouseout = null;
      s.remove();
    };
  }
};

/**
 * @description: vTitle指令
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const useTitle: Function = function (): object {
  return {
    mounted(el: HTMLElement, binding: any) {
      creatTitle(el, binding.value);
    },
    update(el: HTMLElement, binding: any) {
      creatTitle(el, binding.value);
    }
  }
}


export { useTitle, useClickOutside, useResize }