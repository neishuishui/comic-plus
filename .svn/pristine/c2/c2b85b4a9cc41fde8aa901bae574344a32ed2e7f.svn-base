import { reactive } from 'vue';
import type { Plugin, Component, App } from 'vue';
import type { ComicConfig } from './export.type';
import { formRGBA, colorMixin } from './utils/color-mixin';
import { deepMerge } from './tools/index';

import components from './components';

import CuMessageBox from './components/message-box/index';
import { preview } from './components/preview-image/index';
import { CuLoading, vLoading, useLoading } from './components/loading/main';
import { vTitle, useTitle } from './components/title/main';

const plugin = {
  install(app: App, config: ComicConfig) {
    components.forEach((item: Component) => {
      app.use(item as unknown as { install: () => any });
    });

    app.config.globalProperties.$alert = CuMessageBox.alert;
    app.config.globalProperties.$confirm = CuMessageBox.confirm;
    app.config.globalProperties.$message = CuMessageBox.message;
    app.config.globalProperties.$notice = CuMessageBox.notice;

    app.config.globalProperties.$preview = preview;
    app.config.globalProperties.$loading = CuLoading;

    app.use(vLoading);
    app.use(vTitle);

    useComicConfig(config);
  }
} as Plugin;

var assignConfig = reactive({}) as ComicConfig;

function useComicConfig(config: ComicConfig): void {
  setColor(config?.color);

  assignConfig = reactive(deepMerge(assignConfig, config));

  setComicClassName(assignConfig.isComic);
  window.$COMIC = assignConfig;
}

function setColor(value?: object | string): void {
  if (!value) return;
  let obj = {};
  if (typeof value === 'string') {
    obj.primary = value;
  } else {
    obj = value;
  }
  const colors = {
    primary: '--cu-color-primary',
    success: '--cu-color-success',
    danger: '--cu-color-danger',
    warning: '--cu-color-warning',
    info: '--cu-color-info',
    font: '--cu-text-color'
  };
  for (const key in obj) {
    if (colors[key]) {
      const c = formRGBA(obj[key]) || [];
      document.body.style.setProperty(colors[key], `rgba(${c.join(',')})`);
      document.body.style.setProperty(`${colors[key]}-light`, colorMixin(c, 70));
      document.body.style.setProperty(`${colors[key]}-light2`, colorMixin(c, 10));
    }
  }
}

function setComicClassName(comic?: boolean): void {
  if (comic) {
    document.body.classList.add('comic-plus__is-comic');
  } else {
    document.body.classList.remove('comic-plus__is-comic');
  }
}

export default plugin;

export * from './tools/index';
export * from './export.type';
export * from './components';

export { CuMessageBox, preview, CuLoading, vLoading, useComicConfig, useLoading, useTitle, vTitle };
