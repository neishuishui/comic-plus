<template>
  <div
    class="cu-time-picker"
    :class="[{ checked: show }, { 'is-disabled': disabled }, { range }, currentSize]"
    :style="{ width }"
    v-click-outside:timePicker="onClickOutside"
  >
    <div
      class="cu-time-picker__inner"
      :style="clearable ? 'padding-right:18px;' : undefined"
      @click="handleClick"
      @mouseover="mouseover"
      @mouseleave="mouseleave"
    >
      <i :class="icon" v-if="icon != 'none'"></i>
      <input
        type="text"
        readonly
        :value="range ? modelValue[0] : modelValue"
        :placeholder="range ? startPlaceholder : placeholder"
        :disabled="disabled"
      />
      <span v-if="range">{{ rangeSeparator }}</span>
      <input
        v-if="range"
        type="text"
        readonly
        :value="modelValue[1]"
        :placeholder="endPlaceholder"
        :disabled="disabled"
      />
      <i class="cu-icon-close-c" v-show="showClose" v-if="clearable" @click.stop="clear"></i>
    </div>
    <dropdown :show="show" :duration="200" :min-width="range ? 390 : 180">
      <div class="cu-time-picker__dropdown" :class="{ range }" outside="timePicker">
        <time-select @confirm="confirmTime" @cancel="show = false" :range="range" :time-value="timeValue"></time-select>
      </div>
    </dropdown>
  </div>
</template>

<script setup lang="ts">
import { ref, provide, computed, inject, ComputedRef } from 'vue';
import '../style/css';
import { useClickOutside } from '../../utils/directive.js';
import useItemValidate from '../../utils/mixin/validate.js';
import dropdown from '../../dropdown/src/main.vue';
import timeSelect from './time-select.vue';
import { useConfig } from '../../utils/config.js';
import { timePickerProps, timePickerEmits } from './main.props';

defineOptions({
  name: 'CuTimePicker'
});
const props = defineProps(timePickerProps);
const emit = defineEmits(timePickerEmits);

const { itemValidate } = useItemValidate();
const { SIZE } = useConfig();
const formSize = inject<ComputedRef<string> | null>('form:size', null);

const currentSize = computed(() => {
  return props.size ?? formSize?.value ?? SIZE;
});

const show = ref(false);
const showClose = ref(false);

const vClickOutside = useClickOutside();

const timeValue = computed(() => {
  if (props.range) {
    let arr: string[][] = [];
    for (const key in props.modelValue) {
      let list: string[] = props.modelValue[key]?.split(':');
      arr.push(list.length === 3 ? list : ['00', '00', '00']);
    }
    return arr.length === 2
      ? arr
      : [
          ['00', '00', '00'],
          ['00', '00', '00']
        ];
  } else {
    let list: string[] = props.modelValue?.split(':');
    return list.length === 3 ? list : ['00', '00', '00'];
  }
});

const isModelValue = computed(() => {
  if (props.range) {
    return props.modelValue.length > 0;
  }
  return !!props.modelValue;
});

function onClickOutside() {
  show.value && (show.value = false);
}

function handleClick() {
  show.value = !show.value;
}
function mouseover() {
  if (props.disabled) return;
  isModelValue.value && (showClose.value = true);
}

function mouseleave() {
  if (props.disabled) return;
  isModelValue.value && (showClose.value = false);
}
function clear() {
  emit('update:modelValue', props.range ? [] : '');
  change(props.range ? [] : '');
  emit('clear');
  showClose.value = false;
}

function confirmTime(arr: string[] | string[][]) {
  let val: string | string[];
  if (props.range) {
    val = arr.map((v) => v.join(':'));
  } else {
    val = arr.join(':');
  }
  emit('update:modelValue', val);
  change(val);
  show.value = false;
}

function change(val: string | string[]) {
  emit('change', val);
  itemValidate('change');
}
</script>
