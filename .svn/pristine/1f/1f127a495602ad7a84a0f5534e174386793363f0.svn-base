<template>
  <transition name="cu-fade" @after-enter="onAfterEnter" @after-leave="onModeAfterLeave">
    <div class="cu-mode cu-mode__flex" v-if="showMode" @click.self="handleModeClose" :style="modeStyle">
      <transition name="cu-fade-top" @after-leave="onAfterLeave">
        <div class="cu-popup" :class="[type, { center }]" v-if="showConfirm">
          <div class="cu-popup__head" :style="{ color }">
            <div class="title">
              <i v-if="headIcon" :class="headIcon"></i>
              <span>{{ title }}</span>
            </div>
            <i class="cu-icon-shut" @click="cancel('close')" v-if="showClose"></i>
          </div>
          <div class="cu-popup__content">
            <div v-html="content"></div>
          </div>
          <div class="cu-popup__footer">
            <cu-button
              size="mini"
              @click="cancel(distinguishCloseAndCancel ? 'cancel' : 'close')"
              v-if="showCancelButton"
            >
              {{ cancelButtonText }}
            </cu-button>
            <cu-button
              v-if="showConfirmButton"
              size="mini"
              :type="color ? undefined : type === 'error' ? 'danger' : type || 'primary'"
              :custom-style="{ color }"
              @click="confirm"
            >
              {{ confirmButtonText }}
            </cu-button>
          </div>
        </div>
      </transition>
    </div>
  </transition>
</template>

<script setup lang="ts">
import { ref, onMounted, computed, onUnmounted } from 'vue';
import '../../style/css';
import CuButton from '../../../button/src/main.vue';
import { getMaxZIndex } from '../../../utils/tools.js';
import { confirmProps } from './main.props';
defineOptions({
  name: 'CuConfirm'
});
const props = defineProps(confirmProps);
const showMode = ref(false);
const showConfirm = ref(false);
const TYPE = ref('cancel');
const typeList = ref({
  primary: 'cu-icon-tips',
  success: 'cu-icon-success-c',
  warning: 'cu-icon-warning',
  error: 'cu-icon-warning-s'
});

const headIcon = computed(() => {
  if (!props.showIcon) return false;
  if (props.icon) return props.icon;
  return props.type ? typeList.value[props.type] : '';
});

const modeStyle = computed(() => {
  return {
    zIndex: getMaxZIndex()
  };
});

function onAfterEnter() {
  showConfirm.value = true;
}
function handleModeClose() {
  if (!props.modeClose) return;
  cancel('close');
}
function cancel(val: string) {
  showConfirm.value = false;
  TYPE.value = val;
}
function confirm() {
  showConfirm.value = false;
  TYPE.value = 'confirm';
}
function onAfterLeave() {
  showMode.value = false;
}

function onModeAfterLeave() {
  props.close();
  props.callback && props.callback({ result: TYPE.value });
}

function escKeydown(e: KeyboardEvent) {
  if (e.keyCode === 27) {
    cancel(props.distinguishCloseAndCancel ? 'esc' : 'close');
  }
}
onMounted(() => {
  showMode.value = true;
  if (props.escClose) {
    document.addEventListener('keydown', escKeydown);
  }
});
onUnmounted(() => {
  document.removeEventListener('keydown', escKeydown);
});
</script>
