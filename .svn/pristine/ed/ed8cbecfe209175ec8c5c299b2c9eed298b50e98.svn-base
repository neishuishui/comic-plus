
declare const _default: import('vue').DefineComponent<{
    readonly progress: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly barType: {
        readonly type: StringConstructor;
        readonly default: "line";
        readonly validator: (value: any) => boolean;
    };
    readonly status: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly size: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: "120";
    };
    readonly barWidth: NumberConstructor;
    readonly colors: import("vue").PropType<string | object | Function>;
    readonly insetFormat: BooleanConstructor;
    readonly format: StringConstructor;
    readonly showText: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    readonly progress: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly barType: {
        readonly type: StringConstructor;
        readonly default: "line";
        readonly validator: (value: any) => boolean;
    };
    readonly status: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly size: {
        readonly type: import("vue").PropType<string | number>;
        readonly default: "120";
    };
    readonly barWidth: NumberConstructor;
    readonly colors: import("vue").PropType<string | object | Function>;
    readonly insetFormat: BooleanConstructor;
    readonly format: StringConstructor;
    readonly showText: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
}>>, {
    readonly progress: number;
    readonly size: string | number;
    readonly type: string;
    readonly status: string;
    readonly barType: string;
    readonly insetFormat: boolean;
    readonly showText: boolean;
}, {}>;
export default _default;
