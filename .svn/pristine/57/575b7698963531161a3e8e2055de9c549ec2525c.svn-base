
declare const _default: import('vue').DefineComponent<{
    readonly modelValue: {
        readonly type: import("vue").PropType<number | number[]>;
        readonly required: true;
    };
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly color: StringConstructor;
    readonly range: BooleanConstructor;
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: 100;
        readonly validator: (value: number) => boolean;
    };
    readonly min: {
        readonly type: NumberConstructor;
        readonly default: 0;
        readonly validator: (value: number) => boolean;
    };
    readonly step: {
        readonly type: NumberConstructor;
        readonly default: () => number;
    };
    readonly showStep: BooleanConstructor;
    readonly width: StringConstructor;
    readonly disabled: BooleanConstructor;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    change: (val: number | number[]) => void;
    "update:modelValue": (val: number | number[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    readonly modelValue: {
        readonly type: import("vue").PropType<number | number[]>;
        readonly required: true;
    };
    readonly type: {
        readonly type: StringConstructor;
        readonly default: "primary";
    };
    readonly color: StringConstructor;
    readonly range: BooleanConstructor;
    readonly max: {
        readonly type: NumberConstructor;
        readonly default: 100;
        readonly validator: (value: number) => boolean;
    };
    readonly min: {
        readonly type: NumberConstructor;
        readonly default: 0;
        readonly validator: (value: number) => boolean;
    };
    readonly step: {
        readonly type: NumberConstructor;
        readonly default: () => number;
    };
    readonly showStep: BooleanConstructor;
    readonly width: StringConstructor;
    readonly disabled: BooleanConstructor;
}>> & {
    onChange?: (val: number | number[]) => any;
    "onUpdate:modelValue"?: (val: number | number[]) => any;
}, {
    readonly type: string;
    readonly max: number;
    readonly disabled: boolean;
    readonly range: boolean;
    readonly min: number;
    readonly step: number;
    readonly showStep: boolean;
}, {}>;
export default _default;
