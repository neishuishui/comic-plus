<template>
  <label
    class="cu-checkbox"
    :style="activeColor ? '--active-color:' + activeColor : undefined"
    :class="{ 'is-disabled': disabled, 'is-check': isCheck }"
  >
    <input type="checkbox" class="cu-checkbox__input" :checked="isCheck" :disabled="disabled" @change="changeValue" />
    <span class="cu-checkbox__inner" :class="{ ispart }">
      <i v-if="part" :class="modelValue ? 'cu-icon-success ' : ispart ? 'cu-icon-minus' : ''"></i>
      <i v-else class="cu-icon-success" v-show="isCheck"></i>
    </span>
    <span class="cu-checkbox__label">
      <slot>{{ label }}</slot>
    </span>
  </label>
</template>

<script setup lang="ts">
import { computed, inject } from 'vue';
import '../style/checkbox.css';
import { useItemValidate } from '../../../utils';
import { checkboxProps, checkboxEmits } from './main.props';
import type { CheckboxProvide } from './type';
defineOptions({
  name: 'CuCheckbox'
});
const props = defineProps(checkboxProps);
const emit = defineEmits(checkboxEmits);

const part = computed(() => {
  return typeof props.ispart === 'boolean';
});

const parent = inject<CheckboxProvide | null>('checkbox:parent', null);

const { itemValidate } = useItemValidate();

const isCheck = computed(() => {
  return parent ? parent?.activeValue.value.includes(props.label) : props.modelValue;
});

function changeValue(e: Event) {
  const eTarget = e.target as HTMLInputElement;
  if (parent?.changeItemCheck) {
    parent.changeItemCheck(eTarget.checked, props.label);
    itemValidate('change');
    return;
  }
  if (typeof props.modelValue === 'boolean') {
    emit('update:modelValue', eTarget.checked);
    emit('change', eTarget.checked);
    itemValidate('change');
  }
}
</script>
