<template>
  <label class="cu-switch" :style="style" :class="[{ 'is-disabled': disabled }, {'is-square': square }]">
    <input type="checkbox" :checked="isCheck" :disabled="disabled" @change="change" v-show="false" />
    <span class="cu-switch__unactivetext" v-if="unActiveText">{{ unActiveText }}</span>
    <span class="cu-switch__inner">
      <span :class="isCheck ? 'is-active' : 'un-active'"></span>
    </span>
    <span class="cu-switch__activetext" v-if="activeText">{{ activeText }}</span>
  </label>
</template>

<script setup lang="ts">
import { computed } from 'vue';
import '../style/switch.css';
import { useItemValidate } from '../../../utils';
import { switchProps, switchEmits } from './main.props';
defineOptions({
  name: 'CuSwitch'
});
const props = defineProps(switchProps);
const emit = defineEmits(switchEmits);

const { itemValidate } = useItemValidate();

const isCheck = computed(() => {
  return typeof props.modelValue === 'boolean' ? props.modelValue : props.modelValue === props.activeValue;
});

const style = computed(() => {
  return {
    '--cu-switch-active-color': props.activeColor || undefined,
    '--cu-switch-un-active-color': props.unActiveColor || undefined
  };
});

function change(e: MouseEvent) {
  let val =
    typeof props.modelValue === 'boolean'
      ? (<HTMLInputElement>e.target).checked
      : (<HTMLInputElement>e.target).checked
      ? props.activeValue!
      : props.unActiveValue!;
  emit('update:modelValue', val);
  emit('change', val);
  itemValidate('change');
}
</script>
