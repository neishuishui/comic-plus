import { createVNode, render } from 'vue';
import MessageConstructor from './src/main.vue';
import type { MessageOptions } from './src/main.props';
import type { ComicType2 } from '../../type';
import { instancesAppend, instancesRemove, getMessageInstanceId } from './src/instance';
import type { MessageInstance } from './src/instance';

/**
 * @description: useMessage
 * @param {*} options
 * @return {*}
 * @author: 陈龙
 * @logic:
 */
function createInstane(options: MessageOptions): void {
  const container = document.createElement('div');
  const id = getMessageInstanceId();
  const props = {
    ...options,
    id,
    close: (id: string) => {
      instancesRemove(id);
    },
    destroy: () => {
      render(null, container);
    }
  };

  const vnode = createVNode(MessageConstructor, props);
  render(vnode, container);
  const vm = vnode.component!;

  const messageInstance: MessageInstance = {
    id,
    vnode,
    vm
  };

  instancesAppend(messageInstance);

  document.body.appendChild(container.firstElementChild!);
}

const useMessage = (options: MessageOptions) => createInstane(options);
['success', 'warning', 'info', 'error', 'primary'].forEach((type: ComicType2) => {
  (useMessage as any)[type] = (message: string) => createInstane({ type, message });
});

export { useMessage, MessageOptions };
