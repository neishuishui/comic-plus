import { ref, watch } from 'vue'
import type { Ref } from 'vue'

export function useLookScroll(trigger: Ref<boolean>) {

  const recordParentWidth = ref('')

  function getScrollbarWidth() {
    var scrollDiv = document.createElement("div");
    scrollDiv.style.width = '100px';
    scrollDiv.style.height = '100px';
    scrollDiv.style.overflow = 'scroll';
    scrollDiv.style.position = 'absolute';
    scrollDiv.style.top = '-9999px'; // 将元素放置到屏幕外
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollbarWidth;
  }

  function disableScroll(): void {
    recordParentWidth.value = document.body.style.getPropertyValue('width')
    var scrollPosition = [
      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop
    ];
    var scrollWidth = getScrollbarWidth()
    document.body.classList.add('cu-parent--hidden')
    document.body.style.setProperty('width', `calc(100% - ${scrollWidth}px)`)
    window.onscroll = function () {
      window.scrollTo(scrollPosition[0], scrollPosition[1]);
    };

  }

  function enableScroll(): void {
    document.body.classList.remove('cu-parent--hidden')
    if (recordParentWidth.value) {
      document.body.style.setProperty('width', recordParentWidth.value)
    } else {
      document.body.style.removeProperty('width')
    }
    window.onscroll = function () { };
  }

  watch(trigger, (val) => {
    val && disableScroll();
    !val && enableScroll();
  })
}