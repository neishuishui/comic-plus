
import { createVNode, render } from "vue"
import type { ComponentInternalInstance } from "vue"
import TitleConstructor from './main.vue'

var titleBox: HTMLElement | null

function on(el: HTMLElement, vm: ComponentInternalInstance) {
  off(el)
  el.addEventListener('mouseenter', () => mouseenter(vm))
  el.addEventListener('mouseleave', () => leave(vm))
}

function off(el: HTMLElement) {
  el.removeEventListener('mouseenter', () => mouseenter)
  el.removeEventListener('mouseleave', () => leave)
}

function mouseenter(vm: ComponentInternalInstance) {
  vm.exposed?.changeVisible(true)
}


function leave(vm?: ComponentInternalInstance) {
  let timer: any = setTimeout(() => {
    clearTimeout(timer)
    timer = null
    vm?.exposed?.changeVisible(false)
  }, 300)

}

/**
 * @description: useTitle
 * @param {Props} text
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
function createTitle(el: HTMLElement, text: string, position: string): object | undefined {
  if (!text) return
  if (!titleBox) {
    titleBox = document.createElement('div')
    document.body.appendChild(titleBox)
  }
  const container = document.createElement('span');

  const props = {
    title: text,
    position,
    parent: el
  }
  const destroy = function () {
    off(el)
    render(null, container)
    titleBox?.removeChild(container)
    if (titleBox?.children.length === 0) {
      document.body.removeChild(titleBox)
      titleBox = null
    }

  }

  const vnode = createVNode(
    TitleConstructor,
    props
  )
  render(vnode, container)

  const vm = vnode.component!

  titleBox.appendChild(container)

  on(el, vm)

  return {
    vm,
    destroy
  }

};

export { createTitle }
