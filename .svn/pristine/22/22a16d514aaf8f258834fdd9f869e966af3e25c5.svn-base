<template>
  <div class="cu-table" :class="[{ border: options.border }, { scrollbody: scrollWidth > 0 }]">
    <div class="cu-table__head">
      <table>
        <thead :style="options.headStyle">
          <tr class="cu-table__row">
            <th class="cu-table__th checkbox" width="40" v-if="options.selection">
              <checkbox :modelValue="isCheckAll" @change="_changeCheckAll" :ispart="ispart"></checkbox>
            </th>
            <th class="cu-table__th" v-for="th in options.column" :style="styles(th)">
              <span>
                <slot :name="'th-' + th.prop">{{ th.label }}</slot>
              </span>
            </th>
          </tr>
        </thead>
      </table>
      <span class="scroll-gap" :style="{ width: scrollWidth + 'px' }"></span>
    </div>
    <div class="cu-table__body" ref="tableBody" :style="options.bodyStyle">
      <table>
        <tbody>
          <div class="cu-table__empty" v-if="data.length === 0">暂无数据</div>
          <tr
            v-for="(item, i) in data"
            class="cu-table__row"
            :style="{
              backgroundColor: stripeStyle ? stripeStyle[i % 2 == 0 ? 0 : 1] : options?.bodyStyle?.backgroundColor
            }"
          >
            <td class="cu-table__td checkbox" width="40" v-if="options.selection">
              <checkbox
                :modelValue="checkList.findIndex((v) => v === item) >= 0"
                @change="_changeSelection($event, item)"
              ></checkbox>
            </td>
            <td class="cu-table__td" v-for="td in options.column" :style="styles(td)">
              <span>
                <slot :name="td.prop ? td.prop : 'default'" :row="item">{{ item[td.prop] ?? options.empty }}</slot>
              </span>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed, watch } from 'vue';
import '../style/css';
import checkbox from '../../checkbox/src/main.vue';
import { tableProps, tableEmits } from './main.props';
defineOptions({
  name: 'CuTable'
});

const props = defineProps(tableProps);
const emit = defineEmits(tableEmits);

const scrollWidth = ref(0);
const tableBody = ref();
const checkList = ref([]);

watch(props.data, () => {
  checkList.value.splice(0);
});
watch(checkList.value, (val) => {
  emit('select-change', val);
});

const stripeStyle = computed(() => {
  if (!props.options.stripe) return false;
  let s = props.options.bodyStyle || null;
  if (props.options.stripeColors) {
    return [props.options.stripeColors[0] ?? '#fff', props.options.stripeColors[1] ?? '#fafafa'];
  } else {
    return ['#fff', s?.backgroundColor ?? '#fafafa'];
  }
});

const ispart = computed(() => {
  if (!props.options.selection) return false;
  return checkList.value.length > 0 && checkList.value.length < props.data.length;
});

const isCheckAll = computed(() => {
  if (!props.options.selection) return false;
  return checkList.value.length === props.data.length;
});

function styles(css: any) {
  return `
          width:${css.width}px;
          text-align:${css.align};
        `;
}
function _calcScroll() {
  scrollWidth.value = tableBody.value.offsetWidth - tableBody.value.clientWidth;
}
function _changeSelection(e: boolean, item: object) {
  if (e) {
    selectRow(item);
  } else {
    checkList.value.splice(
      checkList.value.findIndex((v) => v === item),
      1
    );
  }
}
function _changeCheckAll(e: boolean) {
  clearSelection();
  if (e) {
    checkList.value.push(...props.data);
  }
}

function selectRow(row: object | object[]) {
  if (checkList.value.find((v) => v === row)) return;
  row = [].concat(row);
  checkList.value.push(...row);
}
function clearSelection() {
  checkList.value.splice(0);
}

defineExpose({ selectRow, clearSelection });

onMounted(() => {
  _calcScroll();
});
</script>
