<template>
  <li
    class="cu-menu-item"
    @click="itemClick"
    :class="{ 'is-active': isActive }"
    ref="cuMenuItem"
    v-menu-title="textLebel"
  >
    <span v-if="icon" :class="icon" class="icon"></span>
    <span>
      <slot>{{ label }}</slot>
    </span>
  </li>
</template>

<script setup lang="ts">
import { inject, computed, ref, onMounted, onUpdated, getCurrentInstance } from 'vue';
import '../style/css';
import { useTitle } from '../../title/main';
import { menuItemProps } from './item.props';
import type { menuProvide, submenuProvide } from './type';
defineOptions({
  name: 'CuMenuItem'
});
const props = defineProps(menuItemProps);

const vMenuTitle = useTitle();
const cuMenuItem = ref();
const instance = getCurrentInstance()!;
const textLebel = ref<string | undefined>('');

onMounted(() => {
  useShowTitle();
});
onUpdated(() => {
  useShowTitle();
});

const parent = inject<menuProvide>('menu:parent');
const submenuParent = inject<submenuProvide | null>('submenu:parent', null);

const isActive = computed(() => {
  if (parent?.props.modelValue) {
    return parent.props.modelValue == props.index;
  }
  return false;
});

submenuParent?.setActive({
  uid: instance.uid,
  isActive
});

function useShowTitle() {
  if (cuMenuItem.value.clientWidth < cuMenuItem.value.scrollWidth && parent?.props.showEllipsis) {
    textLebel.value = props.label;
  }
}

function itemClick() {
  parent?.useItemClick(props.index);
  if (submenuParent?.isHorizontal.value) {
    submenuParent?.closeMenu(true);
  }
}
</script>
