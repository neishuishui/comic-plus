<template>
  <div class="cu-date-table__box">
    <div class="shortcuts" v-if="shortcuts">
      <span v-for="el in shortcuts" @click="pickShortcut(el.value)">{{ el.label }}</span>
    </div>
    <cu-date-table :value="range ? timeValue[0] : timeValue" @change="changeTime($event, 0)"></cu-date-table>
    <cu-date-table v-if="range" :value="timeValue[1]" @change="changeTime($event, 1)"></cu-date-table>
  </div>
  <div class="cu-date-picker__footer">
    <cu-button plain size="mini" @click="emit('cancel')">取消</cu-button>
    <cu-button size="mini" type="primary" @click="confirm">确认</cu-button>
  </div>
</template>

<script setup lang="ts">
import { ref, onBeforeMount, watch } from 'vue';
import CuDateTable from './date-table.vue';
import { isArray } from '../../../utils';
import { CuButton } from '../../button';
import { dateSelectProps, dateSelectEmits } from './select.props';
defineOptions({
  name: 'CuDateSelect'
});

const props = defineProps(dateSelectProps);
const emit = defineEmits(dateSelectEmits);

const timeValue = props.range ? ref([0, 0]) : ref(0);

function confirm() {
  if (props.range) {
    timeValue.value[0] ||= new Date().getTime();
    timeValue.value[1] ||= new Date().getTime();
    timeValue.value[1] = new Date(timeValue.value[1]).getTime() + (24 * 60 * 60 * 1000 - 1);
  } else {
    timeValue.value ||= new Date().getTime();
  }
  emit('pick', timeValue.value);
}
function changeTime(val: number, flag: number) {
  if (props.range) {
    timeValue.value[flag] = val;
  } else {
    timeValue.value = val;
  }
}
function pickShortcut(val: any) {
  if (typeof val === 'function') {
    val = val();
  }
  if (props.range) {
    timeValue.value = [
      val[0] ? new Date(val[0]).getTime() : new Date().getTime(),
      val[1] ? new Date(val[1]).getTime() : new Date().getTime()
    ];
  } else {
    timeValue.value = new Date(val).getTime();
  }
  this.confirm();
}

function setValue() {
  if (isArray(props.range ? [] : null)) {
    timeValue.value = [
      props.value[0] ? new Date(props.value[0]).getTime() : new Date().getTime(),
      props.value[1] ? new Date(props.value[1]).getTime() : new Date().getTime()
    ];
  } else {
    let val = props.value as Date | string | number;
    timeValue.value = props.value ? new Date(val).getTime() : new Date().getTime();
  }
}

watch(() => props.value, setValue);
onBeforeMount(setValue);
</script>
