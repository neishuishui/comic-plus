/**
 * @description: 防抖
 * @param {Function} func
 * @param {number} delay
 * @return {Function}
 * @author: 陈龙
 * @logic:
 */
function debounce(func: Function, delay: number = 200, immediate: boolean = false): (...args: any) => void {
  if (typeof func !== 'function') {
    throw new TypeError('need a function arguments');
  }
  let timerId: any;
  return function (...args: any) {
    clearTimeout(timerId);
    if (immediate) {
      let callnow = !timerId;
      timerId = setTimeout(() => {
        timerId = null;
      }, delay);
      if (callnow) func.apply(this, args);
    } else {
      timerId = setTimeout(() => {
        func.apply(this, args);
      }, delay);
    }
  };
}

/**
 * @description: 节流
 * @param {Function} func
 * @param {number} delay
 * @param {boolean} immediate
 * @return {Function}
 * @author: 陈龙
 * @logic:
 */
function throttle(func: Function, delay: number = 500, immediate: boolean = false): (...args: any) => void {
  if (typeof func !== 'function') {
    throw new TypeError('need a function arguments');
  }
  var timerId: any;
  return function (...args: any) {
    if (immediate) {
      if (!timerId) {
        func.apply(this, args);
        timerId = setTimeout(function () {
          clearTimeout(timerId);
          timerId = null;
        }, delay);
      }
    } else {
      if (!timerId) {
        timerId = setTimeout(function () {
          func.apply(this, args);
          clearTimeout(timerId);
          timerId = null;
        }, delay);
      }
    }
  };
}

/**
 * @description: 判断是否是数字
 * @param {any} value
 * @return {*}
 * @author: 陈龙
 * @logic:
 */
function isNumber(value: any): boolean {
  return typeof value === 'number';
}

/**
 * @description: 设置zIndex
 * @param {Document} dom
 * @return {*}
 * @author: 陈龙
 * @logic:
 */
function getMaxZIndex(dom: HTMLElement | Document = document): number {
  const allElement = Array.from(dom.querySelectorAll('*'));
  const zIndexArray: number[] = [];
  allElement.forEach((item) => {
    const itemZIndex: number = Number(window.getComputedStyle(item, null).getPropertyValue('z-index'));
    if (itemZIndex) {
      zIndexArray.push(itemZIndex);
    }
  });
  let maxZIndex = 0;
  if (zIndexArray.length) {
    maxZIndex = Math.max(...zIndexArray);
  }
  return maxZIndex + 1;
}

/**
 * @description: 根据下标删除指定数组内容返回新数组
 * @param {any[]} arr 数组
 * @param {number} index 要删除的位置下标
 * @return {any[]}
 * @author: 陈龙
 * @logic:
 */
function deleteAfterIndex(arr: any[], index: number): any[] {
  if (index >= 0 && index < arr.length) {
    arr.splice(index + 1, arr.length - index - 1);
  }
  return arr;
}

/**
 * @description: 补0操作
 * @param {number | string} value
 * @return {*}
 * @author: 陈龙
 * @logic:
 */
function repairZero(value: number | string): string {
  value = Number(value);
  if (isNaN(value)) {
    throw new Error('value is not of type number');
  }
  return (value < 10 ? '0' + value : value).toString();
}

/**
 * @description: 日期格式化
 * @param {any} timestamp
 * @param {string} fmt
 * @return {string}
 * @author: 陈龙
 * @logic:
 */
function formatDate(timestamp: any, fmt: string): string {
  if (!timestamp || isNaN(new Date(timestamp).getTime())) {
    return '';
  }
  try {
    var date: Date = new Date(timestamp);

    if (!fmt) fmt = 'yyyy-MM-dd hh:mm:ss';

    var o = {
      'M+': date.getMonth() + 1, //月份
      'd+': date.getDate(), //日
      'h+': date.getHours(), //小时
      'm+': date.getMinutes(), //分
      's+': date.getSeconds(), //秒
      'q+': Math.floor((date.getMonth() + 3) / 3), //季度
      S: date.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
    for (var k in o)
      if (new RegExp('(' + k + ')').test(fmt))
        fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
    return fmt;
  } catch (e) {
    return '';
  }
}

/**
 * @description: 找出数组最大值或最小值下标位置
 * @param {number[]} arr 数组
 * @param {boolean} flag  true为最大值 false为最小值  默认false
 * @return {number}
 * @author: 陈龙
 * @logic:
 */
function findIndexOfMinOrMax(arr: number[], flag?: boolean): number {
  if (arr.length === 0) {
    return -1;
  }
  let flagValue: number;
  if (flag) {
    flagValue = Math.max(...arr);
  } else {
    flagValue = Math.min(...arr);
  }
  const index = arr.indexOf(flagValue);
  return index;
}

/**
 * @description: 根据指定字段将深度递归的数组拍扁
 * @param {any} arr
 * @param {string} key
 * @return {*}
 * @author: 陈龙
 * @logic:
 */
function flattenArray(arr: any[], key: string): any[] {
  const newArray = JSON.parse(JSON.stringify(arr));

  const result: any[] = [];
  function flatten(obj) {
    result.push(obj);
    if (obj[key]) {
      obj[key].forEach((child) => flatten(child));
      // delete obj[key];
    }
  }
  newArray.forEach((obj) => flatten(obj));
  return result;
}

export {
  debounce,
  throttle,
  isNumber,
  getMaxZIndex,
  deleteAfterIndex,
  repairZero,
  formatDate,
  findIndexOfMinOrMax,
  flattenArray
};
