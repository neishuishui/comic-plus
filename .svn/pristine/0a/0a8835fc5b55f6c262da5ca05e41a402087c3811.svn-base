<template>
  <div class="cu-color-picker__pane" :style="{ background }" @mousedown="mousedown">
    <div class="mixin_white"></div>
    <div class="mixin_black"></div>
    <span class="spot" :style="spotStyle"></span>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, inject, watch, getCurrentInstance, onMounted } from 'vue';
import type { ColorProvide } from '../type';

defineOptions({
  name: 'CuColorPane'
});

const parent = inject<ColorProvide>('color:parent');

const instance = getCurrentInstance();
const x = ref(0);
const y = ref(0);

const background = computed(() => {
  return `hsl(${parent?.color.get('hue')}deg 100% 50%)`;
});

const colorValue = computed(() => {
  return parent?.color.get('value');
});

watch(
  () => colorValue.value,
  (val) => {
    update(val);
  }
);

onMounted(() => {
  update(colorValue.value);
});

function update(color: any) {
  const saturation = parent?.color.get('saturation');
  const ele = instance?.vnode.el;
  let { clientWidth, clientHeight }: any = ele;
  clientWidth = Math.max(clientWidth, 288);
  clientHeight = Math.max(clientHeight, 160);
  x.value = (saturation * clientWidth) / 100;
  y.value = ((100 - color) * clientHeight) / 100;
}

const spotStyle = computed(() => {
  return {
    left: x.value + 'px',
    top: y.value + 'px'
  };
});

function mousedown(e) {
  setLeftAndTop(e);
  updateColor();
  document.addEventListener('mousemove', move);
  document.addEventListener('mouseup', up);
}

function move(e: MouseEvent) {
  setLeftAndTop(e);
  updateColor();
}

function setLeftAndTop(e) {
  const ele = instance?.vnode.el;
  const rect = ele?.getBoundingClientRect();
  let left = e.clientX - rect.left;
  let top = e.clientY - rect.top;
  left = Math.max(0, left);
  left = Math.min(left, rect.width);

  top = Math.max(0, top);
  top = Math.min(top, rect.height);

  x.value = left;
  y.value = top;
}

function up() {
  document.removeEventListener('mousemove', move);
  document.removeEventListener('mouseup', up);
}

function updateColor() {
  if (parent) {
    const ele = instance?.vnode.el;
    const { clientWidth, clientHeight }: any = ele;
    parent?.color.set({
      saturation: (x.value / clientWidth) * 100,
      value: 100 - (y.value / clientHeight) * 100
    });
  }
}
</script>
