<template>
  <div class="cu-scroll" :style="{ '--w': w + 'px', '--h': h + 'px' }" v-resize="onResize">
    <div
      class="cu-scroll__body"
      :class="[scrollType, { horizontal: scrollPostion === 'x' }, { haveScroll: haveScroll() }]"
      @scroll="onScroll"
      ref="scrollbody"
    >
      <div class="y-scroll">
        <slot></slot>
      </div>
    </div>
  </div>
</template>

<script lang="ts" setup>
import { ref } from 'vue';
import '../style/css';
import { useResize } from '../../utils/directive.js';
defineOptions({
  name: 'CuScrollBar'
});
const props = defineProps({
  scrollType: {
    type: String,
    default: () => {
      return ''; // none / auto
    }
  },
  scrollPostion: {
    type: String,
    default: () => {
      return 'y'; // x
    }
  },
  bottomDistance: {
    type: Number,
    default: () => {
      return 0;
    }
  },
  isDelay: Boolean
});

const emit = defineEmits(['hit-bottom', 'scroll']);
const vResize = useResize();

const w = ref(0);
const h = ref(0);
const isThrotth = ref(false);
const scrollbody = ref();

function haveScroll() {
  if (scrollbody.value) {
    return props.scrollPostion === 'y'
      ? scrollbody.value.clientHeight < scrollbody.value.scrollHeight
      : scrollbody.value.clientWidth < scrollbody.value.scrollHeight;
  }
  return false;
}
function onResize(e: object) {
  w.value = e.width;
  h.value = e.height;
}
function onScroll(e: Event) {
  emit('scroll', e);
  if (e.target.scrollTop + props.bottomDistance + e.target.clientHeight >= e.target.scrollHeight) {
    if (isThrotth.value) return;
    if (props.isDelay) {
      isThrotth.value = true;
    }
    emit('hit-bottom', () => {
      isThrotth.value = false;
    });
  }
}

function scrollTo(val: number) {
  scrollbody.value.scrollTop = val;
}
defineExpose({ scrollTo });
</script>
