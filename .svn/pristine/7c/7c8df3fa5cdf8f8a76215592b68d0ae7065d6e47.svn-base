<template>
  <div
    class="cu-color-picker"
    :class="[currentSize, { 'is-disabled': disabled }, { checked: show }]"
    v-click-outside:colorPickerDropdown="onClickOutside"
  >
    <div class="cu-color-picker__container" :class="{ alpha }" @click="handleClick">
      <div class="preview__box" :style="{ background: modelValue }"></div>
      <i class="cu-icon-minus" v-if="!modelValue"></i>
      <i class="cu-icon-bottom-s" v-else></i>
    </div>
    <cu-dropdown :show="show" :duration="200">
      <div class="cu-color-picker__dropdown" outside="colorPickerDropdown">
        <pane :color="color"></pane>
        <div class="cu-color-picker__huering">
          <div class="flex1">
            <hsl-slider :color="color"></hsl-slider>
            <alpha-slider v-if="alpha" :color="color"></alpha-slider>
          </div>
          <color-preview :color="color"></color-preview>
        </div>
        <preset-list v-if="predefine" :predefine="predefine" :color="color"></preset-list>
        <div class="cu-color-picker__buttons">
          <cu-input
            v-model="colorValue"
            @keyup.enter="convertColors"
            @blur="convertColors"
            size="mini"
            style="width: 140px"
          ></cu-input>
          <div>
            <cu-button plain size="mini" @click="clear">清空</cu-button>
            <cu-button type="primary" size="mini" @click="confirm">确认</cu-button>
          </div>
        </div>
      </div>
    </cu-dropdown>
  </div>
</template>

<script setup lang="ts">
import { ref, provide, watch, reactive, ComputedRef, inject, computed } from 'vue';
import '../style/css';
import { CuDropdown } from '../../dropdown';
import pane from './components/pane.vue';
import hslSlider from './components/hsl-slider.vue';
import alphaSlider from './components/alpha-slider.vue';
import colorPreview from './components/color-preview.vue';
import presetList from './components/preset.vue';
import { CuButton } from '../../button/index';
import { CuInput } from '../../input/index';
import { useClickOutside } from '../../utils/directive.js';
import { useConfig } from '../../utils/config.js';
import useItemValidate from '../../utils/mixin/validate';
import { colorPickerProps, colorPickerEmits } from './main.props';
import Color from '../utils/color';
defineOptions({
  name: 'CuColorPicker'
});

const props = defineProps(colorPickerProps);
const emit = defineEmits(colorPickerEmits);

const { itemValidate } = useItemValidate();
const { SIZE } = useConfig();
const formSize = inject<ComputedRef<string> | null>('form:size', null);

const currentSize = computed(() => {
  return props.size ?? formSize?.value ?? SIZE;
});
const show = ref(false);
const color = reactive(
  new Color({
    enableAlpha: props.alpha,
    format: props.format,
    value: props.modelValue
  })
) as Color;

const colorValue = ref(color.value);

watch(
  () => color.value,
  (val) => {
    colorValue.value = val;
  }
);

const vClickOutside = useClickOutside();

function onClickOutside() {
  show.value && (show.value = false);
}

function convertColors() {
  color.fromString(colorValue.value);
}

function handleClick() {
  if (props.disabled) return;
  show.value = !show.value;
  if (show.value) {
    color.fromString(props.modelValue);
  }
}

function confirm() {
  emit('update:modelValue', colorValue.value);
  change(colorValue.value);
  show.value = false;
}

function clear() {
  color.fromString('');
  colorValue.value = '';
  color.value = '';
  emit('update:modelValue', '');
  change('');
  show.value = false;
}

function change(val: string) {
  emit('change', val);
  itemValidate('change');
}

provide('color:parent', {
  props,
  show,
  color
});
</script>
