<template>
  <div class="cu-step" ref="step" :class="direction" :style="{ '--active-color': activeColor }">
    <slot></slot>
  </div>
</template>

<script setup lang="ts">
import { ref, provide, onBeforeMount, watch, computed } from 'vue';
import { isNumber } from '../../utils/tools';
import '../style/css';
import { stepProps } from './main.props';
defineOptions({
  name: 'CuStep'
});
const props = defineProps(stepProps);

const step = ref();
const itemList = ref<number[]>([]);

function addItem(uid: number) {
  itemList.value.push(uid);
}
function removeItem(uid: number) {
  itemList.value.splice(
    itemList.value.findIndex((id) => id === uid),
    1
  );
}

watch(
  () => props.active,
  (val) => {
    if (step.value && isNumber(val)) {
      let child: any = Array.from(step.value.children)[val!];
      child?.scrollIntoView({ block: 'nearest', inline: 'center', behavior: 'smooth' });
    }
  }
);
const maxWidth = computed(() => {
  return 100 / itemList.value.length;
});

provide('step:parent', {
  addItem,
  removeItem,
  props,
  itemList,
  maxWidth
});

onBeforeMount(() => {
  itemList.value = [];
});
</script>
