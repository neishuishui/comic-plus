<template>
  <tr class="cu-table__row" :class="columnData.rowClassName" v-bind="$attrs" v-show="show">
    <td
      class="cu-table__td checkbox fixed-left"
      :class="{ 'fixed-shadow-left': getStickyIndex.left == -1 }"
      width="40"
      v-if="options.selection"
    >
      <cu-checkbox
        :modelValue="checkList.findIndex((v) => v === columnData) >= 0"
        @change="_changeSelection($event, columnData)"
      ></cu-checkbox>
    </td>
    <td
      colspan="1"
      rowspan="1"
      class="cu-table__td"
      :class="[
        td.fixed ? 'fixed-' + td.fixed : undefined,
        { 'fixed-shadow-left': getStickyIndex.left == i },
        { 'fixed-shadow-right': getStickyIndex.right == i },
        getColClassName(td, i)
      ]"
      v-for="(td, i) in columns"
      :key="i"
      :style="{
        ...styles(td, i),
        '--placeholder-left': calcPaddingLeft + 4 + 'px'
      }"
    >
      <span
        class="cu-table__td-placeholder"
        :class="{ unfold: showmore }"
        :style="{ left: calcPaddingLeft - 16 + 'px' }"
        v-if="(columnData[childrenKey] || columnData[hasChildrenKey] || expand) && i === 0"
        @click="loadMore"
      >
        <i :class="loadLoading ? 'cu-icon-loading' : 'cu-icon-right'"></i>
      </span>
      <span>
        <slot :name="td.prop" :row="columnData">{{ columnData[td.prop] ?? options.empty }}</slot>
      </span>
    </td>
  </tr>
  <template v-if="expand && $slots.expand">
    <div v-show="showmore" class="cu-table__expand">
      <td
        :colspan="columns.length"
        class="cu-table__expand-td"
        :style="{ '--placeholder-left': calcPaddingLeft - 16 + 'px' }"
      >
        <slot name="expand" :row="columnData"> </slot>
      </td>
    </div>
  </template>
  <template v-if="columnData[childrenKey] || columnData[hasChildrenKey]">
    <template v-for="(item, itemIndex) in columnChildList" :key="itemIndex">
      <cu-table-tr
        v-bind="props"
        :column-data="item"
        :calcPaddingLeft="calcPaddingLeft + 10"
        :show="showmore"
        @change-selection="changeSelectionTree"
        :ckeckList="layerCheckList"
        @add-option="emit('add-option', $event)"
      >
        <template v-for="td in columns" #[td.prop]="{ row }">
          <slot :name="td.prop" :row="row"> </slot>
        </template>
        <template #expand="{ row }" v-if="expand && $slots.expand">
          <slot name="expand" :row="row"> </slot>
        </template>
      </cu-table-tr>
    </template>
  </template>
</template>

<script setup lang="ts">
import { computed, ref, watch } from 'vue';
import { tableProps } from '../main.props';

defineOptions({
  name: 'CuTableTr'
});

const props = defineProps({
  columnData: Object,
  checkList: Array,
  index: Number,
  calcPaddingLeft: {
    type: Number,
    default: 20
  },
  show: {
    type: Boolean,
    default: true
  },
  ...tableProps
});

const emit = defineEmits(['load', 'change-selection', 'add-option']);

const showmore = ref(false);
const moreList = ref<any[]>([]);
const loadLoading = ref(false);
const isLazy = ref(false);
const MIN_SIZE = 120;
const layerCheckList = ref<any[]>([]);

watch(
  () => props.show,
  (val) => {
    if (!val) {
      showmore.value = false;
    }
  }
);

const childrenKey = computed(() => {
  return props.treeProps?.children ?? 'children';
});

const hasChildrenKey = computed(() => {
  return props.treeProps?.hasChildren;
});

const columnChildList = computed(() => {
  return [...(props.columnData[childrenKey.value] ?? []), ...moreList.value];
});

const columns = computed(() => {
  let column = props.options.column ?? [];
  column = column.sort((a, b) => {
    if (a.fixed === 'left' && (!b.fixed || b.fixed !== 'left')) {
      return -1;
    } else if (b.fixed === 'left' && (!a.fixed || a.fixed !== 'left')) {
      return 1;
    } else if (a.fixed === 'right' && b.fixed !== 'right') {
      return 1;
    } else if (b.fixed === 'right' && a.fixed !== 'right') {
      return -1;
    } else {
      return 0;
    }
  });
  return column;
});

function findLastObjectWithProperty() {
  for (let i = columns.value?.length! - 1; i >= 0; i--) {
    let item = columns.value?.[i];
    if (item?.fixed === 'left') {
      return i;
    }
  }
  return -1;
}

const getStickyIndex = computed(() => {
  return {
    left: findLastObjectWithProperty(),
    right: columns.value?.findIndex((v) => v.fixed === 'right')
  };
});

function _changeSelection(checked: boolean, row: any) {
  emit('change-selection', checked, row);
  if (checked && columnChildList.value.length > 0) {
    layerCheckList.value = checked ? columnChildList.value : [];
  }
}

function changeSelectionTree(checked: boolean, row: any) {
  emit('change-selection', checked, row);
}

function styles(css: any, index: number) {
  let obj: any = {};
  obj.textAlign = css.align;
  if (css.fixed === 'left') {
    obj.left = getStickyLeft(index) + 'px';
  } else if (css.fixed === 'right') {
    obj.right = getStickyRight(index) + 'px';
  }
  return obj;
}

function getStickyLeft(index: number) {
  let left: number = 0;
  if (index > 0) {
    for (let i = 0; i < index; i++) {
      let item = columns.value?.[i];
      left += item?.fixed === 'left' ? item?.width || MIN_SIZE : 0;
    }
  }
  left += props.options.selection ? 40 : 0;
  return left;
}
function getStickyRight(index: number) {
  let right: number = 0;
  if (index < columns.value?.length! - 1) {
    for (let i = columns.value?.length! - 1; i > index; i--) {
      let item = columns.value?.[i];
      right += item?.fixed === 'right' ? item?.width || MIN_SIZE : 0;
    }
  }
  return right;
}

function getColClassName(td, tdIndex) {
  if (typeof td.className === 'function') {
    return td.className(props.columnData, props.index, td.prop, tdIndex);
  } else {
    return td.className;
  }
}

function loadMore() {
  if (props.lazyLoad && !isLazy.value) {
    loadLoading.value = true;
    isLazy.value = true;
    props.load?.(props.columnData, _then);
  } else {
    showmore.value = !showmore.value;
  }

  function _then(arr: any[]) {
    emit('add-option', arr);
    moreList.value = [...moreList.value, ...arr];
    showmore.value = true;
    loadLoading.value = false;
  }
}
</script>
