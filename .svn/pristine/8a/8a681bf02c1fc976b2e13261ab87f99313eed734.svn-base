<template>
  <label
    class="cu-checkbox"
    :style="activeColor ? '--active-color:' + activeColor : undefined"
    :class="{ 'is-disabled': disabled, 'is-check': isCheck }">
    <input type="checkbox" class="cu-checkbox__input" :checked="isCheck" :disabled="disabled" @change="changeValue" />
    <span class="cu-checkbox__inner" :class="{ ispart }">
      <i
        v-if="typeof props.ispart === 'boolean'"
        :class="modelValue ? 'cu-icon-check ' : ispart ? 'cu-icon-minus' : ''"></i>
      <i v-else class="cu-icon-check" v-show="isCheck"></i>
    </span>
    <span class="cu-checkbox__label" v-if="label || $slots.default">
      <slot>{{ label }}</slot>
    </span>
  </label>
</template>

<script setup lang="ts">
import { computed, inject } from 'vue';
import '../style/checkbox.css';
import { useItemValidate } from '../../../utils';
import { checkboxProps, checkboxEmits } from './main.props';
import type { CheckboxProvide } from './type';
defineOptions({
  name: 'CuCheckbox'
});
const props = defineProps(checkboxProps);
const emit = defineEmits(checkboxEmits);

const parent = inject<CheckboxProvide | null>('checkbox:parent', null);

const { itemValidate } = useItemValidate();

const isCheck = computed(() => {
  if (parent) {
    return parent?.activeValue.value.includes(props.label);
  } else {
    return typeof props.modelValue === 'boolean' ? props.modelValue : props.modelValue === props.activeValue;
  }
});

function changeValue(e: Event) {
  const eTarget = e.target as HTMLInputElement;
  if (parent) {
    parent.changeItemCheck(eTarget.checked, props.label);
    itemValidate('change');
    return;
  } else {
    let val =
      typeof props.modelValue === 'boolean'
        ? eTarget.checked
        : eTarget.checked
        ? props.activeValue!
        : props.unActiveValue!;
    emit('update:modelValue', val);
    emit('change', val);
    itemValidate('change');
  }
}
</script>
