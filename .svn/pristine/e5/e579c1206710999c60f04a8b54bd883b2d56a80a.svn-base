<template>
  <Teleport to="body" :disabled="!toBody">
    <transition name="cu-fade" @after-enter="onAfterEnter">
      <div class="cu-mode" v-if="showMode" @click.self="modeHandleClick" :style="modeStyle">
        <transition :name="'cu-drawer-' + direction" @after-leave="onAfterLeave">
          <div class="cu-drawer" :class="'cu-drawer--' + direction" v-if="showDrawer" :style="drawerStyle">
            <div class="cu-drawer__header">
              <div>
                <slot name="header"> {{ header }} </slot>
              </div>
              <i class="cu-icon-shut" @click="close" v-if="showClose"></i>
            </div>
            <div class="cu-drawer__content">
              <slot></slot>
            </div>
            <div class="cu-drawer__footer" v-if="$slots.footer">
              <slot name="footer"> </slot>
            </div>
          </div>
        </transition>
      </div>
    </transition>
  </Teleport>
</template>

<script setup lang="ts">
import { ref, watch, computed } from 'vue';
import '../style/css';
import { getMaxZIndex } from '../../utils/tools.js';
import { drawerProps, drawerEmits } from './main.props';
defineOptions({
  name: 'CuDrawer'
});

const props = defineProps(drawerProps);
const emit = defineEmits(drawerEmits);

const showMode = ref(false);
const showDrawer = ref(false);

watch(
  () => props.modelValue,
  (val) => {
    if (val) {
      showMode.value = true;
    } else {
      showDrawer.value = false;
    }
  }
);

const modeStyle = computed(() => {
  return {
    position: props.toBody ? 'fixed' : 'absolute',
    zIndex: getMaxZIndex()
  };
});

const drawerStyle = computed(() => {
  const key = ['left', 'right'].includes(props.direction) ? 'width' : 'height';
  return {
    [key]: props.dimension,
    backgroundColor: props.color
  };
});

function onAfterEnter() {
  showDrawer.value = true;
  emit('open');
}
function modeHandleClick() {
  if (!props.modeClose) return;
  close();
}
function close() {
  if (typeof props.beforeClose === 'function') {
    props.beforeClose(done);
  } else {
    done();
  }
}
function done() {
  showDrawer.value = false;
}

function onAfterLeave() {
  showMode.value = false;
  emit('update:modelValue', false);
  emit('close');
}
</script>
