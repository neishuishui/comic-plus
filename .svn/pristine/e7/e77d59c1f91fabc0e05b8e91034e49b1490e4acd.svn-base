<template>
  <div class="cu-date-picker__select">
    <div class="head">
      <i class="cu-icon-left-d" @click="pannelType === 'year' ? page-- : tmpYear--"></i>
      <i class="cu-icon-left" v-if="pannelType === 'date'" @click="prevMonth"></i>
      <div class="head-content">
        <span v-show="pannelType === 'year'">{{ yearList[0] + '年-' + yearList[yearList.length - 1] + '年' }}</span>
        <span v-show="pannelType !== 'year'" @click="pannelType = 'year'">{{ tmpYear + '年' }}</span>
        <span v-show="pannelType === 'date'" @click="pannelType = 'month'">{{ tmpMonth + 1 + '月' }}</span>
      </div>
      <i class="cu-icon-right" v-if="pannelType === 'date'" @click="nextMonth"></i>
      <i class="cu-icon-right-d" @click="pannelType === 'year' ? page++ : tmpYear++"></i>
    </div>
    <div class="content">
      <div class="week" v-show="pannelType === 'date'">
        <span v-for="week in weeks" :key="week">{{ weekForLang(week) }}</span>
      </div>
      <div class="days" v-show="pannelType === 'date'">
        <div v-for="(weeks, weeksIndex) in dates" :key="weeksIndex">
          <span
            v-for="day in weeks"
            :key="day"
            :class="[{ 'is-notcur': !day.isCurMonth }, { selected: isSelected(day) }]"
            @click="selectDay(day)"
            >{{ day.value }}</span
          >
        </div>
      </div>
      <div class="month" v-show="pannelType === 'month'">
        <div v-for="month in 11" :class="{ selected: month - 1 === tmpMonth }" @click="selectMonth(month - 1)">
          {{ monthForLang(month - 1) + '月' }}
        </div>
      </div>
      <div class="year" v-show="pannelType === 'year'">
        <div v-for="year in yearList" :class="{ selected: year === tmpYear }" @click="selectYear(year)">{{ year }}</div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted } from 'vue';
import '../style/css';
defineOptions({
  name: 'CuDateTable'
});
const props = defineProps({
  value: {
    type: Number
  },
  flagTime: Number
});

const emit = defineEmits(['change']);

const weeks = ref([0, 1, 2, 3, 4, 5, 6]);
const tmpYear = ref();
const tmpMonth = ref();
const tmpDate = ref();

function init() {
  let time = props.value ? new Date(props.value) : new Date();

  tmpYear.value = time.getFullYear();
  tmpMonth.value = time.getMonth();
  tmpDate.value = time.getDate();
}

const page = ref(0);
const pannelType = ref('date');

function monthForLang(item: string | number, lang: string = 'zh') {
  return {
    0: '一',
    1: '二',
    2: '三',
    3: '四',
    4: '五',
    5: '六',
    6: '七',
    7: '八',
    8: '九',
    9: '十',
    10: '十一',
    11: '十二'
  }[item];
}
function weekForLang(item: string | number, lang: string = 'zh') {
  return { 0: '日', 1: '一', 2: '二', 3: '三', 4: '四', 5: '五', 6: '六' }[item];
}

const yearList = computed(() => {
  return Array.from({ length: 12 }, (val, index) => {
    return tmpYear.value + index + 12 * page.value;
  });
});

const dates = computed(() => {
  let tmpMonthLength = new Date(tmpYear.value, tmpMonth.value + 1, 0).getDate();
  let dateList = Array.from({ length: tmpMonthLength }, (val, index) => {
    return {
      isCurMonth: true,
      value: index + 1
    };
  });
  let firstDay = new Date(tmpYear.value, tmpMonth.value, 1).getDay();
  let lastMonthLength = new Date(tmpYear.value, tmpMonth.value, 0).getDate();
  let len: number, i: number;
  for (i = lastMonthLength; i > lastMonthLength - firstDay; --i) {
    dateList.unshift({
      isPrevMonth: true,
      value: i
    });
  }
  for (i = 0, len = dateList.length; i + len < 42; ++i) {
    dateList.push({
      isNextMonth: true,
      value: i + 1
    });
  }
  let result = [];
  for (var x = 0; x < Math.ceil(dateList.length / 7); x++) {
    var start = x * 7;
    var end = start + 7;
    result.push(dateList.slice(start, end));
  }
  return result;
});

function prevMonth() {
  if (pannelType.value === 'date') {
    tmpMonth.value === 0 ? (--tmpYear.value, (tmpMonth.value = 11)) : --tmpMonth.value;
  } else if (pannelType.value === 'year') {
    --page.value;
  }
}
function nextMonth() {
  if (pannelType.value === 'date') {
    tmpMonth.value === 11 ? (++tmpYear.value, (tmpMonth.value = 0)) : ++tmpMonth.value;
  } else if (pannelType.value === 'year') {
    ++page.value;
  }
}
function selectYear(year: number) {
  tmpYear.value = year;
  pannelType.value = 'month';
}
function selectMonth(month: number) {
  tmpMonth.value = month;
  pannelType.value = 'date';
}

function selectDay(item: object) {
  item.isPrevMonth
    ? tmpMonth.value === 0
      ? (--tmpYear.value, (tmpMonth.value = 11))
      : --tmpMonth.value
    : item.isNextMonth
    ? tmpMonth.value === 11
      ? (++tmpYear.value, (tmpMonth.value = 0))
      : ++tmpMonth.value
    : (tmpYear.value, tmpMonth.value);
  tmpDate.value = item.value;

  const val: number = new Date(tmpYear.value, tmpMonth.value, tmpDate.value).getTime();
  emit('change', val);
}

function isSelected(item: object) {
  let mon = tmpMonth.value;
  item.isPrevMonth && mon--;
  item.isNextMonth && mon++;
  let time: number = new Date(tmpYear.value, mon, item.value).getTime();
  let f: number = new Date(tmpYear.value, tmpMonth.value, tmpDate.value).getTime();
  return time === f;
}

defineExpose({ init });

onMounted(() => {
  init();
});
</script>
