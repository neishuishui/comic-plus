import type { PropType, ExtractPropTypes } from "vue";

interface Prop {
  children?: string,
  label?: string,
  value?: string,
  separator?: string
}


export const cascaderProps = {
  modelValue: {
    type: Array as PropType<object[]>,
    required: true,
    default: []
  },
  options: {
    type: Array as PropType<object[]>,
    required: true,
    default: []
  },
  size: {
    type: String,
    validator: (value: string) => ['small', 'mini'].includes(value)
  },
  disabled: Boolean,
  width: String,
  clearable: Boolean,
  arbitrarily: Boolean,
  placeholder: String,
  prop: {
    type: Object as PropType<Prop>,
    default: () => {
      return {
        children: 'children',
        label: 'label',
        value: 'value',
        separator: '/'
      };
    }
  }
} as const

export type CascaderProps = ExtractPropTypes<typeof cascaderProps>


export const cascaderEmits = {
  ['update:modelValue']: (val: any[]) => Array.isArray(val),
  change: (val: any[]) => Array.isArray(val),
  clear: () => true
}

export type CascaderEmits = typeof cascaderEmits