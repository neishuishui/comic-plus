import { createVNode, render } from "vue";
import LoadingConstructor from './main.vue'
import type { LoadingInstance, LoadingOptions } from './type'

function createLoading(option: LoadingOptions, visible?: boolean): any {

  const container = document.createElement('div')

  const props = {
    ...option,
    visible,
    close: () => {
      render(null, container)
    }
  }

  const vnode = createVNode(
    LoadingConstructor,
    props
  )

  render(vnode, container)

  option.target?.appendChild(container.firstElementChild!)

  return {
    vnode,
    updateVisible: (val: boolean, destroy?: Function) => {
      const vm = vnode.component!
      vm.exposed?.updateVisible(val, destroy)
    },
    destroy: () => {
      render(null, container)
    }
  }
}

function getDataAttribute(el: HTMLElement): object {
  let blur = el.getAttribute('comic-loading-blur')
  const obj = {
    icon: el.getAttribute('comic-loading-icon') ?? undefined,
    text: el.getAttribute('comic-loading-text') ?? undefined,
    background: el.getAttribute('comic-loading-background') ?? undefined,
    color: el.getAttribute('comic-loading-color') ?? undefined,
    blur: blur === '' || blur === 'true' ? true : false,
  }
  return obj
}


var loadingInstance: LoadingInstance;

function LoadingService(option?: LoadingOptions): LoadingInstance {
  if (loadingInstance) {
    loadingInstance.updateVisible(true)
    return loadingInstance
  }
  const el: HTMLElement = option?.target ?? document.body
  let instance = createLoading({
    ...option,
    target: el,
  })


  loadingInstance = {
    ...instance,
    close: () => {
      instance.updateVisible(false)
      setTimeout(() => {
        instance.destroy()
        loadingInstance = undefined
      }, 300)

    }
  }

  return loadingInstance
}

export { createLoading, getDataAttribute, LoadingService }
