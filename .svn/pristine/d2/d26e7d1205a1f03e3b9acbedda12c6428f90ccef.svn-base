
import { getMaxZIndex } from "../../utils/tools";

const divProps = {
  icon: '',
  text: '',
  blur: false,
  style: {
    position: 'absolute',
    background: '',
    color: ''
  }
}

interface option {
  target?: HTMLElement;
  icon?: string;
  text?: string;
  background?: string;
  color?: string;
  blur?: boolean
}

const createLoading: Function = function (option: option, glabal: boolean = false): HTMLElement {

  const el: HTMLElement = option.target || document.body

  const props = JSON.parse(JSON.stringify(divProps))
  props.icon = option.icon || 'cu-icon-loading'
  props.text = option.text
  props.style.background = option.background
  props.style.color = option.color
  props.blur = option.blur

  const div = document.createElement('div')
  const span = document.createElement('span')
  span.classList.add('cu-loading__icon', props.icon)
  div.appendChild(span)
  if (props.text) {
    const text = document.createElement('span')
    text.className = 'cu-loading__text'
    text.innerText = props.text
    div.appendChild(text)
  }
  div.className = 'cu-loading'

  if (glabal) {
    props.style.position = 'fixed'

  } else {
    const position = window.getComputedStyle(el).position;
    if (position === 'static') {
      el.style.position = 'relative'
    }
  }
  for (const key in props.style) {
    div.style.setProperty(key, props.style[key])
  }
  div.style.setProperty('backdrop-filter', props.blur ? 'blur(2px)' : 'blur(0)')
  div.style.setProperty('z-index', getMaxZIndex(el).toString())
  el.appendChild(div)
  return div
}

const updateLoading: Function = function (dom: HTMLElement, option: option) {
  let icon = dom.querySelector('.cu-loading__icon')
  let text: HTMLElement | null = dom.querySelector('.cu-loading__text')

  if (icon && option.icon) {
    icon.className = ''
    icon.classList.add('cu-loading__icon', option.icon)
  }

  if (text) {
    text.innerText = option.text || text.innerText
  }

  option.background && dom.style.setProperty('background', option.background)
  option.color && dom.style.setProperty('color', option.color)

  dom.style.setProperty('z-index', getMaxZIndex().toString())
}

const getDataAttribute: Function = function (el: HTMLElement): object {
  let blur = el.getAttribute('comic-loading-blur')
  const obj = {
    icon: el.getAttribute('comic-loading-icon'),
    text: el.getAttribute('comic-loading-text'),
    background: el.getAttribute('comic-loading-background'),
    color: el.getAttribute('comic-loading-color'),
    blur: blur === '' || blur === 'true' ? true : false,
  }
  return obj
}


class LoadingService {
  _instance: any = null
  constructor() { }
  service(option: option = {}) {
    let { target, icon, text, background, color, blur } = option
    if (!this._instance) {
      const el: HTMLElement = target || document.body
      let dom = createLoading({
        target: el,
        icon,
        text,
        background,
        color,
        blur
      }, true)
      this._instance = {
        dom: dom,
        parent: el,
        close: () => {
          this._instance = null
          el.removeChild(dom)
        }
      }
    } else {
      updateLoading(this._instance.dom, option)
    }
    return this._instance
  }

}


export { createLoading, getDataAttribute, LoadingService, updateLoading }
