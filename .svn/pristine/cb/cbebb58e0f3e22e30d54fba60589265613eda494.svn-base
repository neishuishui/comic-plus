<template>
  <label
    class="cu-radio-button"
    :style="activeColor ? '--active-color:' + activeColor : undefined"
    :class="[{ 'is-disabled': disabled, 'is-checked': isCheck }, currentSize]">
    <input type="radio" v-show="false" :disabled="disabled" :checked="isCheck" :value="label" @change="changeValue" />
    <span class="cu-radio__label">
      <slot>{{ label }}</slot>
    </span>
  </label>
</template>

<script setup lang="ts">
import { computed, inject } from 'vue';
import type { ComputedRef } from 'vue';
import '../style/radio.css';
import { useConfig, useItemValidate } from '../../../utils';
import { radioProps, radioEmits } from './main.props';
import type { RadioProvide } from './type';
defineOptions({
  name: 'CuRadioButton'
});
const props = defineProps(radioProps);
const emit = defineEmits(radioEmits);

const { itemValidate } = useItemValidate();
const { SIZE } = useConfig();

const parent = inject<RadioProvide | null>('radio:parent', null);
const formSize = inject<ComputedRef<string> | null>('form:size', null);

const isCheck = computed(() => {
  return parent ? parent.activeValue?.value === props.label : props.modelValue === props.label;
});

const currentSize = computed(() => {
  return props.size ?? parent?.props.size ?? formSize?.value ?? SIZE?.value;
});

function changeValue() {
  if (parent) {
    parent.changeItemCheck(props.label);
    return;
  }
  emit('update:modelValue', props.label);
  emit('change', props.label);
  itemValidate('change');
}
</script>
