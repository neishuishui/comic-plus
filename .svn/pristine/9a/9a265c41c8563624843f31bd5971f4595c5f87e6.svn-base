<template>
  <div class="cu-collapse-item" :style="style">
    <div class="cu-collapse-item__head" @click="changeShow">
      <slot name="head">
        <span>
          <slot name="label">{{ label }}</slot>
        </span>
        <span class="cu-collapse-item__line"></span>
        <span class="cu-icon-right" :class="{ active: showItem }"></span>
      </slot>
    </div>
    <transition-collapse :show="showItem">
      <div class="cu-collapse-item__content" :style="{ maxHeight: height }">
        <slot></slot>
      </div>
    </transition-collapse>
  </div>
</template>

<script setup lang="ts">
import { inject, computed, Ref, ComputedRef } from 'vue';
import '../style/css';
import transitionCollapse from '../../transition-collapse/src/main.vue';
import { collapseItemProps } from './item.props';

defineOptions({
  name: 'CuCollapseItem'
});
const props = defineProps(collapseItemProps);

const accordion = inject<ComputedRef<boolean>>('collapse:accordion');
const activeValue = inject<Ref<string[] | string>>('collapse:activeValue');
const pColor = inject<ComputedRef<string>>('collapse:color');
const pBackground = inject('collapse:background');
const pMaxHeight = inject<ComputedRef<string>>('collapse:maxHeight');
const collapseChange = inject<Function>('collapse:collapseChange');

const height = computed(() => {
  if (!props.maxHeight && !pMaxHeight) {
    return undefined;
  }
  let mh = props.maxHeight || pMaxHeight?.value || undefined;
  return typeof mh === 'number' ? mh + 'px' : mh;
});

const showItem = computed(() => {
  return accordion?.value ? activeValue?.value === props.name : activeValue?.value.includes(props.name) || false;
});

const style = computed(() => {
  if (!pBackground) return undefined;
  return {
    backgroundColor: props.color || pColor?.value
  };
});

const changeShow = function () {
  collapseChange && collapseChange(!showItem.value, props.name);
};
</script>
