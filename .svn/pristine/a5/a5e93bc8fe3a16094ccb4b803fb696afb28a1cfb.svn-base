<template>
  <div class="cu-time-picker__list" @scroll="onScroll" ref="list">
    <span v-for="item in num" :class="{ active: active == item - 1 }" @click="itemHandClick">{{
      repairZero(item - 1)
    }}</span>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, computed } from 'vue';
import '../style/css';
import { repairZero, debounce } from '../../utils/tools.js';

const props = defineProps({
  time: String,
  num: Number
});

const emit = defineEmits(['change']);

const list = ref();
const stopScrollTop = ref(0);
const scrollTop = ref(0);

const active = computed(() => {
  return repairZero(parseInt(stopScrollTop.value / 32));
});

const onScroll = (e: Event) => {
  setScroll(e);
  scrollTop.value = e.target.scrollTop;
};

const setScroll = debounce((e: Event) => {
  stopScrollTop.value = e.target.scrollTop;
  if (scrollTop.value === stopScrollTop.value) {
    let scrollTop = parseInt(e.target.scrollTop / 32) * 32;
    list.value.scrollTop = scrollTop;
    emit('change', active.value);
  }
}, 20);

function itemHandClick(e: Event) {
  e.target.scrollIntoView({ behavior: 'smooth', block: 'center' });
}

onMounted(() => {
  setTimeout(() => {
    list.value.children[props.time * 1].scrollIntoView({ block: 'center' });
  }, 50);
});
</script>
