<template>
  <form class="cu-form" :class="['label-' + labelPosition, size]" onsubmit="return false">
    <slot></slot>
  </form>
</template>

<script setup lang="ts">
import { provide, ref, onMounted, computed } from 'vue';
import '../style/css';
import { formProps } from './main.props';
defineOptions({
  name: 'CuForm'
});

interface ItemInfoProp {
  uid: number;
  prop: string;
  validate: Function;
  clearValidate: Function;
}

const props = defineProps(formProps);

const itemInfoList = ref<ItemInfoProp[]>([]);
const originData = ref({});

function validate(callback: Function) {
  const promises = itemInfoList.value.map((item: ItemInfoProp) => item.validate());
  Promise.all(promises)
    .then(() => {
      callback(true);
    })
    .catch(() => {
      callback(false);
    });
}

function validateFields(names: string[], callback: Function) {
  if (!props.rules) return;
  const promises = itemInfoList.value
    .filter((item: ItemInfoProp) => names.includes(item.prop))
    .map((item: ItemInfoProp) => item.validate());
  Promise.all(promises)
    .then(() => {
      callback(true);
    })
    .catch(() => {
      callback(false);
    });
}

function clearValidates(names: string[] | undefined) {
  const promises = itemInfoList.value.filter(names ? (item: ItemInfoProp) => names.includes(item.prop) : Boolean);
  promises.forEach((field: ItemInfoProp) => {
    field.clearValidate();
  });
}

function resetFields(names: string[] | undefined) {
  const promises = itemInfoList.value.filter(names ? (item: ItemInfoProp) => names.includes(item.prop) : Boolean);
  promises.forEach((field: ItemInfoProp) => {
    field.clearValidate();
  });
  Object.assign(props.model, originData.value);
}

function itemValidatePush(item: ItemInfoProp) {
  let index = itemInfoList.value.findIndex((v: ItemInfoProp) => v.prop === item.prop);
  if (index >= 0) {
    itemInfoList.value.splice(index, 1);
  }
  itemInfoList.value.push(item);
}

function itemValidateDelete(uid: number) {
  let index = itemInfoList.value.findIndex((v: ItemInfoProp) => v.uid === uid);
  if (index >= 0) {
    itemInfoList.value.splice(index, 1);
  }
}

const provideSize = computed(() => {
  return props.size;
});

provide('form:size', provideSize);
provide('form:parent', {
  props,
  itemValidatePush,
  itemValidateDelete
});

defineExpose({
  validate,
  validateFields,
  clearValidates,
  resetFields
});

onMounted(() => {
  originData.value = JSON.parse(JSON.stringify(props.model));
});
</script>
