

/**
 * @description: 防抖
 * @param {Function} func
 * @param {number} delay
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const debounce: Function = function (func: Function, delay: number = 200): Function {
  if (typeof func !== 'function') {
    throw new TypeError('need a function arguments');
  }
  let timerId;
  return function (...args) {
    clearTimeout(timerId)
    timerId = setTimeout(() => {
      func.apply(this, args);
    }, delay);
  };
};

/**
 * @description: 节流
 * @param {Function} func
 * @param {number} delay
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const throttle: Function = function (func: Function, delay: number = 200): Function {
  if (typeof func !== 'function') {
    throw new TypeError('need a function arguments');
  }
  var timerId;
  return function (...args) {
    if (!timerId) {
      timerId = setTimeout(function () {
        func.apply(this, args);
        timerId = null;
      }, delay);
    }
  };
};
/**
 * @description: 判断是否是数字
 * @param {any} value
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const isNumber: Function = function (value: any): boolean {
  return typeof value === "number";
}


/**
 * @description: 设置zIndex
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const getMaxZIndex: Function = function (): number {
  const allElement = Array.from(document.querySelectorAll('*'));
  const zIndexArray = [];
  allElement.forEach((item) => {
    const itemZIndex: number = Number(window.getComputedStyle(item, null).getPropertyValue('z-index'));
    if (itemZIndex) {
      zIndexArray.push(itemZIndex);
    }
  });
  let maxZIndex = 0;
  if (zIndexArray.length) {
    maxZIndex = Math.max(...zIndexArray);
  }
  return maxZIndex >= 2000 ? maxZIndex + 1 : 2000;
}

/**
 * @description: 根据下标删除之地数组内容返回新数组
 * @param {unknown} arr 数组
 * @param {number} index 要删除的位置下标
 * @return {*} 
 * @author: 陈龙
 * @logic: 
 */
const deleteAfterIndex: Function = function (arr: unknown[], index: number): Array<any> {
  if (index >= 0 && index < arr.length) {
    arr.splice(index + 1, arr.length - index - 1);
  }
  return arr;
}

/**
 * @description: 补0操作
 * @param {number} value
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const repairZero: Function = function (value: number | string): string {
  value = Number(value)
  if (isNaN(value)) {
    throw new Error("value is not of type number");
  }
  return (value < 10 ? ('0' + value) : value).toString()
}

/**
 * @description: 日期格式化
 * @param {number} timestamp
 * @param {string} fmt
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const formatDate: Function = function (timestamp: number, fmt: string): string {


  if (!timestamp || isNaN(new Date(timestamp).getTime())) {
    return '';
  }
  try {
    var date: number | Date = timestamp;
    if (typeof timestamp == 'number') {
      date = new Date(timestamp);
    }


    if (!fmt) fmt = 'yyyy-MM-dd hh:mm:ss';

    var o = {
      'M+': date.getMonth() + 1, //月份
      'd+': date.getDate(), //日
      'h+': date.getHours(), //小时
      'm+': date.getMinutes(), //分
      's+': date.getSeconds(), //秒
      's+': date.getSeconds(), //秒
      'q+': Math.floor((date.getMonth() + 3) / 3), //季度
      S: date.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
    for (var k in o)
      if (new RegExp('(' + k + ')').test(fmt))
        fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
    return fmt;
  } catch (e) {
    return '';
  }
}


/**
 * @description: 找出数组最大值或最小值下标位置
 * @param {number} arr 数组
 * @param {boolean} flag  true为最大值 false为最小值  默认false
 * @return {*}
 * @author: 陈龙
 * @logic: 
 */
const findIndexOfMinOrMax: Function = function (arr: number[], flag: boolean): number {
  if (arr.length === 0) {
    return -1;
  }
  let flagValue: number
  if (flag) {
    flagValue = Math.max(...arr);
  } else {
    flagValue = Math.min(...arr);
  }
  const index = arr.indexOf(flagValue);
  return index;
}



export {
  debounce,
  throttle,
  isNumber,
  getMaxZIndex,
  deleteAfterIndex,
  repairZero,
  formatDate,
  findIndexOfMinOrMax
};