<template>
  <div class="cu-upload">
    <template v-if="type === 'picture'">
      <upload-list :type="type" :previewList="previewList" :uploadFileEnum="uploadFileEnum" @remove="removeFile">
        <upload-choose :type="type" @choose="uploadHandleClick">
          <slot v-if="$slots.default"></slot>
          <template #trigger v-if="$slots['trigger']">
            <slot name="trigger"></slot>
          </template>
        </upload-choose>
      </upload-list>
      <div class="cu-upload__tips">
        <slot name="tip"></slot>
      </div>
    </template>

    <template v-if="type === 'list'">
      <upload-choose :type="type" @choose="uploadHandleClick">
        <slot v-if="$slots.default"></slot>
        <template #trigger v-if="$slots['trigger']">
          <slot name="trigger"></slot>
        </template>
      </upload-choose>
      <div class="cu-upload__tips">
        <slot name="tip"></slot>
      </div>
      <upload-list :type="type" :previewList="previewList" :uploadFileEnum="uploadFileEnum" @remove="removeFile">
      </upload-list>
    </template>

    <input
      type="file"
      ref="inputRef"
      v-show="false"
      @change="handleChange"
      :multiple="multiple"
      :disabled="disabled"
      :accept="accept"
      :limit="limit"
    />
  </div>
</template>

<script setup lang="ts">
import { ref, computed, reactive, watch } from 'vue';
import '../style/css';
import uploadList from './upload-list.vue';
import uploadChoose from './upload-choose.vue';
import uploadInstance, { parseFileSize, getUid } from '../utils/upload';
import { uploadProps, uploadEmits } from './main.props';
import type { fileEnum, uploadFile, uploadError } from './type';
defineOptions({
  name: 'CuUpload'
});

const props = defineProps(uploadProps);
const emit = defineEmits(uploadEmits);

const inputRef = ref();
const uploadFileEnum = reactive({}) as fileEnum;

watch(
  () => props.fileList,
  (val) => {
    props.fileList?.forEach((item, index) => {
      props.fileList[index].uid ||= getUid();
    });
  },
  {
    deep: true,
    immediate: true
  }
);

const previewList = computed(() => {
  return props.fileList ?? [];
});

function uploadHandleClick() {
  inputRef.value.click();
}

function handleChange(e: Event) {
  const fArr = (<HTMLInputElement>e.target).files || [];
  const files = <File[]>Array.from(fArr);
  processFile(files);
}

function processFile(files: File[]) {
  if (files.length + props.fileList?.length! > props.limit!) {
    //数量超出
    props.onExceed && props.onExceed(files, props.fileList);
    return;
  }
  if (!props.multiple) {
    files = files.slice(0, 1);
    clearFiles();
  }

  if (props.maxFileSize && files.filter((v) => v.size > parseFileSize(props.maxFileSize)).length > 0) {
    //大小超出
    props.onLarge &&
      props.onLarge(
        files,
        files.filter((v) => v.size > parseFileSize(props.maxFileSize)),
        props.fileList
      );
    return;
  }

  files.forEach((file) => {
    readyUpload(file);
  });
  updateFileList();
  if (props.autoUpload) {
    submit();
  }
}

function clearFiles() {
  for (const uid in uploadFileEnum) {
    delete uploadFileEnum[uid];
  }
}

function readyUpload(file: File) {
  const { headers, http, withCredentials, data } = props;
  const uid = getUid();
  let params = reactive(
    new uploadInstance({
      headers,
      http,
      file,
      data,
      uid,
      withCredentials,
      status: 'ready',
      name: file.name,
      url: URL.createObjectURL(file),
      success: (res: uploadFile, instance: uploadInstance) => {
        const files = changeFiles(instance.uid);
        props.onSuccess && props.onSuccess(res, files);
      },
      fail: (err: uploadError, instance: uploadInstance) => {
        removeFile(instance.uid);
        props.onError && props.onError(err, props.fileList);
      }
    })
  ) as uploadInstance;

  uploadFileEnum[uid] = params;
}

function changeFiles(uid: number): uploadFile[] {
  let files = props.fileList ?? [];
  if (!props.multiple) {
    files = [];
  }
  const { _file: file } = uploadFileEnum[uid];
  let index = files.findIndex((v) => v.uid === uid);
  if (index >= 0) {
    files[index] = { name: file.name, url: file.url, uid };
  } else {
    files.push({ name: file.name, url: file.url, uid });
  }
  delete uploadFileEnum[uid];
  emit('update:fileList', files);
  return files;
}

function updateFileList() {
  let files = props.fileList ?? [];
  if (!props.multiple) {
    files = [];
  }
  const reloadFiles = (<uploadInstance[]>Object.values(uploadFileEnum))
    .map((item: uploadInstance) => {
      return {
        uid: item.uid,
        name: item.name,
        url: item.url
      };
    })
    .filter((v) => files.findIndex((s) => s.uid === v.uid) === -1);

  emit('update:fileList', [...files, ...reloadFiles]);
  props.onChange && props.onChange(files, reloadFiles);
}

function removeFile(uid: number) {
  const propFiles = props.fileList ?? [];
  let index = propFiles.findIndex((v) => v.uid === uid);
  if (index >= 0) {
    propFiles.splice(index, 1);
  }
  if (uploadFileEnum[uid]) {
    delete uploadFileEnum[uid];
  }
  emit('update:fileList', propFiles);
}

async function submit() {
  let result = true;
  const readyList = <uploadInstance[]>Object.values(uploadFileEnum);
  // console.log(props.beforeUpload);

  if (props.beforeUpload) {
    result = await props.beforeUpload(readyList);
  }
  if (result) {
    readyList.forEach((item: uploadInstance) => {
      if (typeof props.http === 'function') {
        props.http(item);
      } else {
        item.upload();
      }
    });
  }
}

defineExpose({ submit });
</script>
